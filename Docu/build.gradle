/*
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
//--------------------------------------------------
// Handles generation of HTML documentation from manual adoc and JSDoc comments plus js API stubs for IDEs, based on JSDoc comments
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    classpath group: 'org.asciidoctor', name: 'asciidoctorj-pdf', version: '1.5.0-alpha.14'
  }
}
apply plugin: "org.asciidoctor.convert"

apply plugin: 'java'
apply plugin: "com.moowork.node"
import groovy.json.JsonSlurper


//*********************************************
// Generate classic HTML-JSDoc
// We use Node.js since Rhino is not longer supported since JSDoc 3.4.0.
// (eriwen gradle-js-plugin even supports only a much older JSDoc version, which even frequently with wired errors without source information on simple things like empty comments, we can't use it here)
task bcduiDocuJsHtml ( type: NodeTask, dependsOn: ':bcduiNodeJsTools' ) {

  dependsOn ":Client:bcduiBuild"

  inputs.dir clientFileGroupsDebug
  def targetDir = "$buildDir/htmldocs/jsdoc"

  script = file("$nodeModulesDir/jsdoc/jsdoc.js")
  args   = [ clientFileGroupsDebug, '-c', "$sharedBuildFilesRoot/Docu/gradle/jsdoc-toolkit/htmlConf.json"]
  outputs.dir targetDir

  doLast {
    // We do not like the generated index.html (listing source files with abs path), content of bcdui.html makes much more sense to us as an entry page
    if( file(targetDir).exists() ) {
      def idx = file("$targetDir/index.html")
      def bcd = file("$targetDir/bcdui.html")
      idx.text = bcd.text
    }
    // Overwrite with our custom styles
    copy {
      from "$sharedBuildFilesRoot/Docu/gradle/jsdoc-toolkit/templates/jaguarjs/static"
      into targetDir
    }
    // Add bgimage
    copy {
      from "./tutorial/content/headerBack.png"
      into targetDir
    }
  }
}



//*********************************************
// For each filegroup, created in Client, we also generate API stubs, suited for Eclipse (version Mars) to support auto-suggest
task bcduiDocuJsApiStubs ( type: NodeTask, dependsOn: ':bcduiNodeJsTools' ) {

  dependsOn ":Client:bcduiBuild"

  def taskDestDirName = "$buildDir/jsApiStubs"
  def inputsDir       = clientFileGroupsDebug

  inputs.dir  inputsDir
  outputs.dir taskDestDirName

  doFirst {

    // Which files are part of this distribution? We only want this to happen in execution phase
    def jsonSlurper = new JsonSlurper()
    def bcduiFiles = jsonSlurper.parseText(file(jsBcduiLoaderPath).text.split("// JSON-PART-FOR-BUILD")[1])
    def fileGroups = (bcduiFiles.groups.inject(""){ result, i -> i.files.any{ ! it.contains("3rdParty") } ? (result.length() ? result+","+i.id: i.id ) : result })

    script = file("$nodeModulesDir/jsdoc/jsdoc.js")
    args   = [ inputsDir,
               "--template", file("$sharedBuildFilesRoot/Docu/gradle/jsdoc-toolkit/templates/bcduiApiStubs"),
               "--destination", file(taskDestDirName),
               "--query", "bcdFileGroups="+fileGroups ]
  }
}



//*********************************************
// Generate tutorial HTML from all.adoc
task bcduiDocuTutorial ( type: org.asciidoctor.gradle.AsciidoctorTask ) {

  def taskDestDirName = "$buildDir/htmldocs/tutorial"
  def taskSource      = "tutorial"

  // Resources under ./images/ are per default copied by AsciidoctorTask
  configure {
    sources {
      include "index.adoc"
    }
    backends = ['html5'] // ['html5','pdf']
    separateOutputDirs = false
    attributes 'source-highlighter'    : 'coderay',
            'coderay-linenums-mode' : 'table',
            icons                   : 'font',
            linkattrs               : true,
            encoding                : 'UTF-8'
    sourceDir = file(taskSource)
    outputDir = file(taskDestDirName)
  }
}


//******************************
// Java doc. We skip JAXB generated, as JAXB does produce invalid output in terms of javadoc (xml-parts in its docu)
task bcduiJavadoc(type: Javadoc) {
  destinationDir = file("$buildDir/htmldocs/javadoc")
  source      = findProject(":Server").sourceSets.main.java
  classpath   = findProject(":Server").sourceSets.main.compileClasspath
  verbose     = false
  title       = 'BCD-UI Api'
  options.windowTitle = 'BCD-UI Api'
  options.header      = "<b style=\"font-size: 20pt; color: #fff\">BCD-UI</b>"
  options.addStringOption('Xdoclint:none',  'quiet')
  options.addStringOption('stylesheetfile', 'gradle/static/javadoc/stylesheet.css')
  options.addStringOption('notimestamp', 'true')
  options.noTimestamp = true
  doLast {
    copy{ from "gradle/static/javadoc" into destinationDir }
  }
}


//******************************
// Creates /build/htmldocs folder with all content meant to be human readable
task bcduiHtmlDocs( type: Copy ) {

  dependsOn bcduiDocuTutorial, bcduiDocuJsHtml, bcduiJavadoc

  from "gradle/static"
  into "$buildDir/htmldocs"
}


//******************************
// Clean artifacts
task bcduiClean( type: Delete ) {
  group "bcd-ui"
  delete buildDir
}

//******************************
// Do all for what gradle 'Docu' project is responsible for

task bcduiBuildDocu {
  group "bcd-ui"
  description "Build docu, see Docu/build, including jsdoc, javadoc and tutorial."
  dependsOn bcduiHtmlDocs, bcduiDocuJsApiStubs
}
