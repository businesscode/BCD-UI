/*
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

/*--------------------------------------------
 * Gradle file building Eclipse project
 * 1.  Create an "Dynamic Web Project"
 *   - Eclipse recommends to keep git projects outside of workspace, so create your project maybe next to it
 * 2a. Copy this file into your front-end project root
 *   - Rename this file to build.gradle
 *   - Adjust sourceCompatibility and version of bcd-ui dependencies
 *   - Add at last your database driver as a dependency or put it to WEB-INF/lib
 * 2b. Copy .gitignore found here to your project root
 * 2c. Copy gradle-wrapper.properties into /gradle/wrapper/
 * 2d. Copy context.xml and web.xml from Server/configFiles/ into your project (into /META-INF and /WEB-INF)
 * 2f. Copy Server/configFiles/log4j2.xml to src/main/resources/
 *   - Also create src/main/java/, this as a source folder
 * 3. Import the project into Eclipse as "Existing Gradle Project"
 *   - Run "Gradle->Refresh Gradle Project" from context menu of the project and refresh "Gradle Task" view
 * 4. Run gradle task "wrapper" and refresh project with F5
 *
 * You can also use a locally build bcdui.jar in WEB-INF/lib, To do that::
 * - remove dependency on the jar from dependencies
 * - copy bcdui_dependencies.gradle next to build.grade
 * - add "apply from: 'bcdui_dependencies.gradle'" before the dependency block
 ------------------------------------------------*/

apply plugin: 'war'
apply plugin: 'eclipse'

// webApp folder in Eclipse is usually WebContent
// To work with a Tomcat started from Eclipse, we put all java .class files where they would be in a normal web app
webAppDirName = 'WebContent'

// Adjust to your target runtime
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// We collect all classes in WEB-INF/classes
sourceSets.main.java.outputDir      = file("$webAppDirName/WEB-INF/classes")
sourceSets.main.output.resourcesDir = file("$webAppDirName/WEB-INF/classes")

// Dependencies
dependencies {
  repositories {
    mavenCentral()
    maven {
      url "https://github.com/businesscode/maven-repo/raw/master"
    }
  }
  implementation 'de.businesscode.bcdui:bcd-ui-core:5.5.0-SNAPSHOT'
  implementation 'de.businesscode.bcdui:bcd-ui-theme-bcd:5.5.0-SNAPSHOT'

  // Local files from WEB-INF/lib
  implementation fileTree(dir: "$webAppDirName/WEB-INF/lib", include: ['*.jar'])

  // If necessary, any additional project dependencies like this
  // implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
  // implementation 'com.oracle.database.jdbc:ojdbc8:19.6.0.0'
}

// We need WEB-INF/lib and WEB-INF/classes as compile dependencies
// war task will add them that way and per default. So here we prevent to have them twice in the war file.
war {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Workaround gradle >= 4.6 to produce classes into WEB-INF/classes
eclipse {
  classpath {
    defaultOutputDir = file("$webAppDirName/WEB-INF/classes")
    file.whenMerged {
      entries.each { source ->
        // This seems kludgy.  If the second test is omitted, it fails processing a 'Project Dependency' entry
        if (source.kind == 'src' && ( source.path.contains('main/resources') || source.path.contains('java') ) && source.toString().contains('output')) {
          source.output = "$webAppDirName/WEB-INF/classes"
        }
      }
    }
  }
}
