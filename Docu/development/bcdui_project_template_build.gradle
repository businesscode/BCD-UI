/*
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

/*--------------------------------------------
 * Gradle file building Eclipse .project
 * 1.  Create an "Dynamic Web Project"
 *   - Eclipse recommends to keep git projects outside of wokspace, so create your project maybe next to it
 * 2a. Copy this file and bcdui_dependencies.gradle into your front-end project root
 *   - Rename this file to build.gradle
 * 2b. Copy .gitignore found here to your project root
 *    - Later, do not add .classpath or .project or .settings to git and do not manually or via Eclipse dialogs change them
 * 2c. Copy gradle-wrapper.properties into /gradle/wrapper/
 * 2d. Copy context.xml and web.xml from Server/configFiles/ into your project
 * 2e. Copy bcd-ui-core|theme*.jar and the database driver in into WEB-INF/lib/
 * 2f. Copy log4j.properties to src/main/resources/
 *    - Also create src/main/java/, this will be your source folder
 * 3. Import the project into Eclipse as "Existing Gradle Project"
 *    - Then run "Gradle->Refresh Gradle Project" from context menu and refresh "Gradle Task" view
 * 8. Run gradle task "wrapper" and refresh project with F5
 * --
 * 10. If you later add more libs always run "Gradle->Refresh Gradle Project"
 ------------------------------------------------*/

apply plugin: 'war'
apply plugin: 'eclipse'

// webApp folder in Eclipse is usually WebContent
// To work with a Tomcat started from Eclipse, we put all java .class files where they would be in a normal web app
webAppDirName = 'WebContent'

// We collect all classes in WEB-INF/classes
sourceSets.main.java.outputDir      = file("$webAppDirName/WEB-INF/classes")
sourceSets.main.output.resourcesDir = file("$webAppDirName/WEB-INF/classes")

// Import dependencies of BCD-UI lib
apply from: 'bcdui_dependencies.gradle'

// Your project's dependencies
dependencies {
  repositories {
    mavenCentral()
  }

  // Local files from WEB-INF/lib
  // Commit bcd-ui-core|theme*.jar, into WEB-INF/lib, and database driver 
  implementation fileTree(dir: "$webAppDirName/WEB-INF/lib", include: ['*.jar'])

  // If necessary, any additional project dependencies like this
  // implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
}

// We need WEB-INF/lib and WEB-INF/classes as compile dependencies
// war task will add them that way and per default. So here we prevent to have them twice in the war file.
war {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Workaround gradle >= 4.6 to produce classes into WEB-INF/classes
eclipse {
  classpath {
    defaultOutputDir = file("$webAppDirName/WEB-INF/classes")
    file.whenMerged {
      entries.each { source ->
        // This seems kludgy.  If the second test is omitted, it fails processing a 'Project Dependency' entry
        if (source.kind == 'src' && ( source.path.contains('main/resources') || source.path.contains('java') ) && source.toString().contains('output')) {
          source.output = "$webAppDirName/WEB-INF/classes"
        }
      }
    }
  }
}
