<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../_generator/doc.xslt" media="screen" ?>
<!--
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Doc title="Design rationales" xmlns="http://www.businesscode.de/schema/bcdui/doc-1.1.0" state="draft">
  <Chapter title="Design rationales" type="overview">
    <Body>
      <p>
        This document collects design decisions
      </p>
    </Body>
  </Chapter>

  <Chapter title="Documentation" type="overview">
    <Body>
      <p>
        <ul>
          <li>Documentation can be generated into pdf and HTML format</li>
          <li>Verbal documentation which is not attached to a single source (i.e. documentation beyond API) is kept in extra XML format separate from the sources in doc.xml files</li>
          <li>doc.xml files have a descriptive part, which describes the features of each component and an development part, which describes how to implement such a component</li>
          <li>doc.xml knowns example, featurelist and overview for feature description and api, extension and howItWorks for implementation description</li>
        </ul>
      </p>
    </Body>
  </Chapter>

  <Chapter title="Client side API" type="overview">
    <Body>
      <p>
        <ul>
          <li>Each component on client side of each granularity is represented by a 1:1 complete JS type with an js API and can be created programmatically</li>
          <li>JS calls use parameter mapping syntax as it scales better for many and optional parameters than parameter list syntax</li>
          <li>Larger components like Cube or ScoreCard have in addition a canonical XML representation making the majority of the features available to XML</li>
          <li>Extension points can be js callbacks and XSLT fragments</li>
          <li>Each component knows how to read the XML, several helper for that task are available</li>
          <li>Each component comes with a jsp wrapper, which acts only as a thin facade for HTML</li>
        </ul>
      </p>
    </Body>
  </Chapter>

  <Chapter title="Server data provider" type="overview">
    <Body>
      <p>
        <ul>
          <li>Data coming from the server is sent in a common WRS format. The WebRowSet format was extended and changed in some ways for easier handling</li>
          <li>The WrsRequest document is able to cover most data requests</li>
        </ul>
      </p>
    </Body>
  </Chapter>

  <Chapter title="Report stylesheet stack" type="overview">
    <Body>
      <p>
        A Wrs with dimensional columns can be displayed in
        <ul>
          <li>A cube like manner as a table</li>
          <li>A tree like manner with plus</li>
        </ul>
      </p>
    </Body>
  </Chapter>

  <Chapter title="Widgets and components" type="overview">
    <Body>
      Widgets are small graphical user interface objects
      <ul>
        <li>The anchor of a widget its container element in the HTML DOM with the parameter attributes.</li>
        <li>The init() method of a widget gets a reference to this container element, the widget's init() does not care who created the container element</li>
        <li>init() reads its parameters, given as bcdParameterName attributes with the helper, which generated from the API doc.</li>
        <li>All methods of a widget are context free, i.e. no js object instance is create for a widget,  if the container element is gone, the widget is gone.</li>
        <li>All init() parameters and all internal status are stored as attributes on the container</li>
        <li>There is a createXYZ() js api per widget to attach the parameters to the container, which is provided. This method has no further logic.</li>
        <li>There is a jsp tag per widget, using the js api, only having the logic of creating the container at its place in the DOM HTML.</li>
        <li>There is a xapi template per widget, only having the logic of creating the container and adding the parameters and calling init(). via bcdOnLoad</li>
        <li>Model listeners created by a widget remove themselfes if they are fired and the corresponding container HTML element is not longer present</li>
      </ul>
      Components are larger user interaction objects
      <ul>
        <li>The anchor of a component and its definition is given as HTML elements and a configuration document</li>
        <li>The anchor is usually created by the component's factory XSLT</li>
        <li>This XSLT can be executed by a renderer, which itself is created in the component's JS factory or by embedding the XSLT in an host XSLT</li>
        <li>The JS factory can be called from JavaScript or via a thin jsp tag wrapper</li>
        <li>After rendering, the code in bcdOnLoad attribute is executed to further create the component</li>
        <li>The code of the component, for example the code belonging to an cube, is a static singleton. Only listeners and the definition document are created per component instance</li>
        <li>The component's data, like data of a grid editor or a cube, is stored in models and synced with the visual HTML representation</li>
        <li>Ids are derived from an optional idPrefix parameter (which itself is generated if not given), all models use that parameter with an appended maker, for example ${idPrefix}_Model</li>
      </ul>
      Sample
      <dl>
        <dt><![CDATA[<comp:chart id="chart_1" definitionModelRef="defModel"/>]]></dt>
        <dd>Is put on a jsp page. It is a thin wrapper and does simply call</dd>
        <dt>bcdui.component.chart.createChart()</dt>
        <dd>in bcdui/component/chart/package.js, which could be called by JS directly. createChart() does create a renderer applying <code>"/lib/bcdui/component/chart/chart.xslt"</code></dd>
        <dt>the renderer</dt>
        <dd>creates the carrier HTML tag and does scan it for bcdOnLoad attribute to execute its content. This in turn is a call to</dd>
        <dt>bcdui.component.chart.init()</dt>
        <dd>in bcdui/component/chart/chart.js, which is creating the chart with the containing HTML element as the anchor. This anchor stores all configuration information, for example the id of the chart definition document.</dd>
      </dl>
      <table style="text-align:center;" cellspacing="0" border="1">
        <tr><td></td><td></td><td><div style="text-align:center;color:red">1) JSP</div> Use the provided jsp tag:
        </td></tr>
        <tr><td></td><td></td><td style="text-align:left">
          <pre><![CDATA[
            <comp:chart id="chart_1"
              definitionModelRef="chart_1_defModel"/>
          !]]></pre>
        </td></tr>
        <tr><td></td><td><div style="text-align:center;color:red">2) JS from scratch</div> Call createChart() directly from JS with the values of course:</td><td>Generates:</td></tr>
        <tr><td></td>
          <td colspan="2" style="text-align:left">
            <pre>
              bcdui.component.chart.createChart( {
                  id:                  "chart_1",
                  targetHTMLElementId: "chart_1_div",
                  definitionModelRef:  "chart_1_defModel" }
              );
            </pre>
          </td>
        </tr>
        <tr>
          <td><div style="color:red;text-align:center;">3) JS with HTML</div> Or you can create the HTML element any other way:</td><td colspan="2">This does apply a renderer, which creates the following HTML element:</td>
        </tr>
        <tr>
          <td style="text-align:left">
          <pre><![CDATA[
              <div id="chart_1"
                definitionmodelref="chart_1_defModel"
                style="width: 100%; height: 100%;">
              </div>
            !]]></pre>
          </td>
          <td colspan="2" style="text-align:left">
          <pre><![CDATA[
              <div id="chart_1" definitionmodelref="chart_1_defModel"
                style="width: 100%; height: 100%;"
                bcdOnLoad=
                 "var id=bcdui.factory.objectRegistry.generateTemporaryId('chart_1');
                  this.setAttribute('id',id); bcdui.component.chart.init( this );"
                >
              </div>
            !]]></pre>
          </td>
        </tr>
        <tr>
          <td>And call directly:</td><td colspan="2">The renderer executes bcdOnLoad, calling:</td>
        </tr>
        <tr>
          <td colspan="3">bcdui.component.chart.init( htmlElement )</td>
        </tr>
      </table>
    </Body>
  </Chapter>


</Doc>

