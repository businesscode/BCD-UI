<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../_generator/doc.xslt" media="screen" ?>
<!--
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Doc title="Debugging"
  xmlns="http://www.businesscode.de/schema/bcdui/doc-1.1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.businesscode.de/schema/bcdui/doc-1.1.0 ../../_generator/doc.xsd"
  state="draft">
  <Chapter title="Debug facilities" type="example">
    <Body>
      <dl>
        <dt>Unzip gui status</dt>
        <dd>To see the guiStatus used in requests in their uncompressed form, send it as <code>data</code> parameter to zipLet, for example <code>http://localhost:8080/webApp/bcdui/servlets/ZipLet?data=z2e-f7xPr3FQumlE...</code></dd>
        <dt>Monitor network traffic</dt>
        <dd>Eclipse "TCP/IP Monitor" view as well as <a href="http://www.fiddler2.com/fiddler2">Fiddler</a> can server as proxies to monitor network traffic exchanged between browser and server.</dd>
        <dt>Server side logging</dt>
        <dd>log4j.propertes file in call path allows fine grained control of server side logging. Per default this is found in the /src/java folders of the template applications.</dd>
        <dt>Endless waiting renderers</dt>
        <dd>use <code>bcdui.factory.objectRegistry.getWaitingIds()</code> to detect ids of renderer/wrapper, waiting for yet non-exisiting ids.</dd>
        <dt>Find out which BindingItems a binding set has</dt>
        <dd>de.businesscode.bcdui.binding.Bindings.getInstance().get("b4_bsg_tte", java.util.Arrays.asList("cage_dy"))</dd>
        <dt>And to read information about a specific one</dt>
        <dd>de.businesscode.bcdui.binding.Bindings.getInstance().get("b4_bsg_tte", java.util.Arrays.asList("cage_dy")).get("cage_dy").getJDBCDataTypeName()</dd>
        <dt>Use the browser developer console to examine client issues</dt>
        <dd>Most modern browser have a console, where you can execute issue javascript commands to examine object status</dd>
        <dt>Use request parameter debug=true</dt>
        <dd>The debug request parameter makes the application more picky about javascript parameters and turns on client logging that might help.</dd>
      </dl>
    </Body>
  </Chapter>

  <Chapter title="Common error messages" type="example">
    <Body>
      <dl>
        <dt>ERROR - Internal stylesheet error. this['node-set']= function (x) { return x; } 0 0 Unzip gui status</dt>
        <dd>This error message occurs if an import of a stylesheet fails inside of an stylesheet. The nodeset function is usually the first
         line after the include statement</dd>
        <dt>IE: An Invalid character was found in text content. Or: Switch from current encoding to specified encoding not supported.</dt>
        <dd>Falsches encoding im xsl:output</dd>
        <dt>FF: XSLT error codes (note, in general in IE the XSLT errors are much easier to debug)</dt>
        <dd><a href="https://developer.mozilla.org/en/Table_Of_Errors#XSLT_Errors">FF XSLT error codes</a></dd>
        <dt>IE: stack overflow at line: 0</dt>
        <dd>Is often related to an IE caching issue, in many cases it goes away with caching being enabled.</dd>
      </dl>
    </Body>
  </Chapter>
</Doc>

