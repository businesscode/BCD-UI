<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="../../_generator/doc.xslt" media="screen" ?>
<!--
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<doc:Doc title="Internationalization" xmlns:doc="http://www.businesscode.de/schema/bcdui/doc-1.1.0">

  <doc:Chapter title="Internationalization" type="overview">
    <doc:Body>
      Internationalization (I18n) allows to provide the user interface in different languages to different users.
      To allow this, caption, text, number and date formats can be changed on runtime depending on a user's language setting.
      I18n will typically operate on front end captions and date formats, but can also in certain cases operate on data level when reading from a database.
      The translation happens on client side in browser by parsing HTML elements that contain bcdTranslate attribute with i18n key as value.
      Each renderer automatically translates its content before pasting the HTML transformation result into HTML document.
      Translation for static HTML contents can be triggered separately.
    </doc:Body>



  <doc:SubChapter title="I18n Setup" type="overview">
    <doc:Body>
      In order to setup BCD-UI internationalization either you have to declare a BindingSet @id=bcdui_i18n
      or save a static file under /myProject/bcdui/conf/messages.xml in WRS format according to BindingSet @id=bcdui_i18n with i18n messages,
      a sample is under BCD-UI/src/js/i18n/messages.xml.

      The BindingSet and data table should have 3 columns named "key", "lang" and "value".
      The content of the "lang"-column can have values conform the java.util.Locale values or a value "default".
      <p>
      <b>Defaults:</b>
      <ul>
        <li>
      i18n model URL: /bcdui/servletsCached/WrsServlet/i18n - the mapping to the URL could be changed in web.xml
        </li>
        <li>
      i18n model request document: /bcdui/i18n/requestDoc.xml  - default request document for default i18n model
        </li>
        <li>
      static i18n file in project: /bcdui/messages.xml - a static file in WRS format with some default BCDUI messages
        </li>
      </ul>
      </p>
    </doc:Body>
  </doc:SubChapter>

  <doc:SubChapter title="I18n on client side" type="overview">
    <doc:Body>
      The client is provided with an XML containing the translated values for the chosen language. The translation APIs are available in JS, XSLT or static HTML.
      Please note that the file is cached on the the client and thus does not harm performance.
      <p/>
      The following fragment shows a sample I18n.xml file created by BCD-UI:
      <doc:xml>
        <Data format="bcdI18n" isKeyNormalized="true">
          <bcd_autoCompletionBox_emptyValue lang="en">Please select</bcd_autoCompletionBox_emptyValue>
          <bcd_autoCompletionBox_clearOption lang="en">Please select</bcd_autoCompletionBox_clearOption>
        </Data>
      </doc:xml>

      <p/>
      The translation happens under the hood when working with renderers, consider following XSLT fragment (which produces HTML):
      <pre><![CDATA[...
<xsl:template match="/">
  <div bcdTranslate="report.header"></div>
  <table>
  ..
  </table>
</xsl:template>
...]]></pre>
      you solely need to place a 'bcdTranslate' attribute with an i18n key on an HTML element to be translated.

      <p/>
      In case you have a mass of data to translate (i.e. contents of a table), then you would write more performant code when
      translating explicitly via XSLT i18n API:
      The following fragment shows how to use i18n translation XSLT API for table data translation:
      <pre><![CDATA[<xsl:import href="i18nUtilsTemplate.xslt"/>
...
<xsl:param name="bcdI18nModel" select="//*[1=2]"/>
...
<xsl:template match="wrs:C">
  <td>
    <!-- get value of a key -->
    <xsl:call-template name="getMessageByKey">
      <xsl:with-param name="key">bcd_autoCompletionBox_emptyValue</xsl:with-param>
    </xsl:call-template>
  </td>
</xsl:template>
...]]></pre>
      This is more performant than implicit 'bcdTranslate' for big number of elements.

      <p/>
      The following fragment shows how to use I18n in HTML/JS in case you create HTML without a renderer (i.e. via JS DOM scripting):
      <pre><![CDATA[<div id="rootElement2Translate">
  <div id="autoCompletionBox_1" bcdTranslate="bcd_autoCompletionBox_emptyValue">
    first none i18n value
  </div>
  <div id="autoCompletionBox_2" bcdTranslate="bcd_autoCompletionBox_clearOption">
    second none i18n value
  </div>
</div>

bcdui.i18n.translateHTMLElement({elementOrId:"rootElement2Translate"});]]></pre>

      Please note that you don't need to trigger translation of static HTML via JS-API which is delivered by web-server during page-request,
      as the translation kicks in automatically once the document has been loaded.

      The bcdui.i18n JS object is created by BCD-UI runtime.
      In addition we can translate HTML attributes by setting its names into @bcdTranslateAttrs,
      like @bcdTranslateAttrs="alt" @alt="my Photo"
    </doc:Body>
  </doc:SubChapter>

  <doc:SubChapter title="I18n during data access" type="overview">
    <doc:Body>
      Sometimes, data derived from the database should depend on the language setting.
      For example, status code captions of events are to be translated for an export without the possibility to use XSLT for translation.
      In such cases, the <b>default item mechanism of <a href="../binding/doc.xml">Bindings</a></b> is to be used.
      To achieve this, create a Binding, joining the event data with the translation table and let the SubjectFilter filter the appropriate rows.
    </doc:Body>
  </doc:SubChapter>

  <doc:SubChapter title="i18n interpolation" type="overview">
    <doc:Body>
      Interpolation supported, lets assume we want to have a message like 'Value must be between 10 and 20', where 10 and 20 are provided during translation.
      To achieve that the caption shall read: 'Value must be between {0,integer} and {1,integer}', the message key may be 'my.info' and msgkey parameter
      has to be 'some.info|10|20'
    </doc:Body>
  </doc:SubChapter>
  </doc:Chapter>

</doc:Doc>
