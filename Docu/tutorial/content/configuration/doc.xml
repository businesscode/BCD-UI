<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../_generator/doc.xslt" media="screen" ?>
<!--
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Doc title="Configuration" xmlns="http://www.businesscode.de/schema/bcdui/doc-1.1.0">

  <Chapter title="Configuration overview" type="overview">
    <Body>
      BCD-UI obtains its configuration from the parameters from JNDI context (as specifided by servlet container) for the backend-part
      and provides client configuration parameters for the client part. The de.businesscode.bcdui.toolbox.Configuration is the API to retrieve
      that configuration. Additionally the Configuration class maintains de.businesscode.bcdui.toolbox.config.DbProperties instance for
      well-known scopes: server and client allowing dynamic configuration.

      <dl>
        <dt>'server' scope</dt>
        <dd>are JNDI defined parameters, additionally parameters from database (DbProperties) with scope "server", DbProperties parameters
        have precedence over JDNI defined parameters. Please always define a TYPE for this scope and stick to same type as originally
        defined in context.xml when overriding parameters.</dd>
        <dt>'client' scope</dt>
        <dd>The only way to enable configuration to be set to client is to enable DbProperties, the client parameters are held in "client" scope.
        These properties are emitted by the BCDUIConfig servlet and exposed into bcdui.config JS object. The TYPE for client-scope property is NOT evaluated,
        and the property value is ALWAYS exposed as a String, hence the value must not be quoted.</dd>
      </dl>
    </Body>
  </Chapter>

  <Chapter title="DbProperties setup" type="overview">
    <Body>
      Setting up the DbProperties to be transparently reflected by the de.businesscode.bcdui.toolbox.Configuration API is a matter
      of exposing the "bcd_db_properties" BindingSet. Configuration class will auto-detect this BindingSet upon initialization and if found, will
      initialize the DbProperties instance. DbProperties may refresh the configuration from Database asynchronously every period given to
      refresh or the refresh can be controlled programmatically. This class is NOT a singleton so may be reused in projects, it takes a
      BindingSet of kind "bcd_db_properties" to initialize. The Configuration class yields an instance of DbProperties stuck to wellknown
      BindingSet "bcd_db_properties".

      Default configuration apply:
      <xml>
        <Environment name="bcdui/config/dbProperties/reloadFrequencySeconds" type="java.lang.Integer" value="30"/>
      </xml>

      the bcd_db_properties table has following column definition:

      <table class="definition">
        <tbody>
          <tr>
            <td>SCOPE</td>
            <td>
            this is a scope for this parameter. When working with de.businesscode.bcdui.toolbox.Configuration, the're two well defined scopes: server, client.
            While the server scope parameters are accessible through:

            <ul>
              <li>de.businesscode.bcdui.toolbox.Configuration.getConfigurationParameter(String)</li>
              <li>de.businesscode.bcdui.toolbox.Configuration.getConfigurationParameter(String, T)</li>
              <li>de.businesscode.bcdui.toolbox.Configuration.getConfigurationParameterOrNull(String id)</li>
            </ul>

            the client scope parameters can be retrieved via de.businesscode.bcdui.toolbox.Configuration.getClientParameters(),
            those are also exposed to the client and available in the bcdui.config JS object.

            The TYPE is obligatory for the parameter in server scope, while for client scope parameters the TYPE is ignored and the
            value is always exposed as a string.
            </td>
          </tr>
          <tr>
            <td>NAME</td>
            <td>
            Parameter name. This is unique to the scope. For server scope the parameter names should follow JNDI naming convention like
            the parameters defined in context.xml, because those parameters are merged while parameters from database overwrite those
            defined statically. Pay attention to the TYPE here, as it has to be same as defined in context.xml

            For client scope you may take any name adhering to JS veriable name syntax, so dots, spaces etc are not allowed.
            </td>
          </tr>
          <tr>
            <td>TYPE</td>
            <td>
            The type of a parameter value. While client-scope parameters do not have typed values (the value is always exposed as a string),
            server scope parameters values are parsed into given type (which is a fully qualified class name). The value evaluation happens
            via reflection API and the only method target class has to expose is a static valueOf(String value) method.

            Hence a type 'java.lang.Boolean' for parameter name 'myBoolean' would evaluate the value 'true' to Boolean.TRUE, such that
            de.businesscode.bcdui.toolbox.Configuration.getConfigurationParameter('myBoolean', false) would return Boolean.TRUE wheras
            de.businesscode.bcdui.toolbox.Configuration.getConfigurationParameter('myBoolean', "false") would throw a ClassCastException
            trying to cast Boolean to a String.

            Therefore, the type has to be really accurate and match types used in context.xml.
            </td>
          </tr>
          <tr>
            <td>VALUE</td>
            <td>
            a value for this parameter. For client scope parameter this value will be exposed as a String, hence must not be further quoted.
            The server scope value follows rules for its TYPE
            </td>
          </tr>
        </tbody>
      </table>
    </Body>
  </Chapter>

</Doc>