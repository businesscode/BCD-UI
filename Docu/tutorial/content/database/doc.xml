<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../_generator/doc.xslt" media="screen" ?>
<!--
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Doc title="Calculation Control" xmlns="http://www.businesscode.de/schema/bcdui/doc-1.1.0" state="draft">
  <!--
       TODO
        <li>re-use sql</li>
        <li>prepared statement for user params</li>
        <li>different criteria types; multiple criteria; date</li>
        automated warning in the front end in case of execution failures
        data types
  -->
  <Chapter title="Job Control 3.x Overview" type="overview">
    <Body>
      The Job Control engine BCD-JC allows to drive the execution of batch jobs optimized for tasks like ETL or calculation processes.
      <dl>
        <dt>Jobs</dt>
        <dd>A job definition is a collection of steps connected via transitions.
            Jobs can use other job definitions as steps.</dd>
        <dt>Steps</dt>
        <dd>A step definition is from the perspective of the engine an atomic operation.
            A step can be an SQL statement or a java code identified by the java class.
            There are pre-defined java steps for extracting data from and to Teradata or Oracle for example.
            Custom java steps can be added.</dd>
        <dt>Transitions</dt>
        <dd>A transition definition connects to steps, a fromStep and a toStep and has an optional condition.
            If a step is finished, all outgoing transitions are checked for their condition.
            For each transition evaluating to true, the toStep is executed.</dd>
        <dt>Job execution</dt>
        <dd>
      A job instance execution starts whenever a job-due-event is detected. The job execution is as follows:
      <ol>
        <li>An entry for the job run is made into the job log table</li>
        <li>All configuration steps are executed first, leaving their entry in the step log table</li>
        <li>Whenever a step finishes, its log entry is closed and all outgoing transitions are evaluated</li>
        <li>For each transition with a condition evaluating to true, the toStep is executed</li>
        <li>If multiple transitions evaluate to true all steps are executed in parallel</li>
      </ol>
        </dd>
      </dl>
    </Body>

    <SubChapter title="Restart behaviour">
      <Body>
        If a job was ended premature due to a failing step with throw 'J' raising an error or due to the job engine being killed for technical reasons,
        its entry in the job log is not closed. Such a job can be restarted.
        <ol>
          <li>In case of restart open steps of the failed run are searched.</li>
          <li>In case such a step is within a logical transaction, the step carrying this logical transaction is the entry point,
              otherwise the failed step itself is the entry point.
              In case multiple steps have the same logical transaction point in terms of stepRunId, this step is only used once.</li>
          <li>From including the identified entry points the job definition is being executed in this restart run.</li>
        </ol>
        The failed job's log entry is marked with the runId of the restart.
        None of the open steps log entries of the originally failed job is closed or changed on restart.
      </Body>
    </SubChapter>

    <SubChapter title="More details">
      <Body>
        <dl>
          <dt>Error behavior</dt>
          <dd>If a step returns an error (rc code >= 8) there are two ways to react
            <ul>
              <li>If the step definition's throw flag is 'J', the job ends unsuccessfully.
                  All other currently running steps are can finish but no new step is started.
                  If the job is called from within another job, the calling step ends unsuccessfully.
                  From their on the same logic applies upwards.</li>
              <li>The outgoing transitions condition can check the fromSteps rc and evaluate to true only in case of error or success.
                  This the further flow can differ in case of error of a step.</li>
            </ul>
          </dd>
          <dt>Transactions</dt>
          <dd>Due to parallelism not all steps can execute with the same uncommited session.
              To still allow transactions, the engine guarantees that if only one outgoing transition of a step evaluates to true, its toStep gets the same uncommited session.
              In all other cases the sessions are retrieved from a pool.</dd>
          <dt>Transition conditions</dt>
          <dd>Transitions can have a condition. The condition is an expression in javascript syntax evaluating to a boolean.
              Conditions can use parameters from the job instants' parameter set via the well-known <code>p</code> object.
              In addition it has access to well-known properties of the <code>bcdjc</code> object like <code>bcdjc.fromStepRc</code>
              which is the return code of the trnsition's fromStep.
              BCD-JC allows for checking the syntax of all conditions and the usage of only well-known objects and properties during definition time.
              A sample expression is <code>p.myParam == 2 &amp;&amp; bcdjc.fromStepRc >= 4</code>.</dd>
          <dt>TODO Configuration steps</dt>
          <dd>Java steps derived from class JavaConfigurationStep are executed before any other steps.</dd>
          <dt>Logging</dt>
          <dd>Each job and each step gets an 'open' log entry when started with its definition id, start time and other information.
              When a step is finished, its return code, affected row count and end time is written to close the step's entry.</dd>
          <dt>Logical names in SQL</dt>
          <dd>Steps defined via SQL statements can make use of the logical naming used in BindingSets.</dd>
          <dt>Parallelism</dt>
          <dd>If multiple transitions leaving a step evaluate to true, all toSteps of these transitions are executed in parallel.
              A limit of max parallel step execution can be set, the engine chooses then which steps to execute first.</dd>
          <dt>Starting jobs via a step</dt>
          <dd>Jobs with class JobStepExternal Steps can start other jobs as external jobs in a fire-and-forget way.</dd>
          <dt>Using jobs via a step</dt>
          <dd>Jobs with class JobStep can reference to job definitions which are then executed within the current job.
              The calling step is not finished until the called job definition is finished.</dd>
        </dl>
        ToDo:
        <ul>
          <li>parameters are only strings</li>
          <li>configuration steps have no specific order and can only be java steps</li>
        </ul>
      </Body>
    </SubChapter>

  </Chapter>

  <Chapter title="Calculation Control Overview" type="overview">
    <Body>
      To ease the calculation of KPIs which are specific for organizational units, a calculation control table together with a scheduler is available.
      The scheduler will interpret the entries in the execution control table and log into the execution history table.
      This allows an easy, ordered and declarative controlled execution of free as well as BCD-BM created complex queries.
      Where and how often the scheduler runs and what parameters it is started with, depends on the installation.
      Although this mechanism targets the execution of measure calculation, the scheduler run can also cover the aggregations.
      <br/>
      Features covered among others:
      <dl>
        <dt>History log</dt>
        <dd>All executions are stored in a history table together with the core description from the control table.
            The history will show the start and finishing timestamp of the step and in case of insert or update also the number of changed rows
            and the return code.</dd>
        <dt>Control execution dependencies</dt>
        <dd>Calculations running on top of each other can be marked as dependent, the system will assure the correct order.</dd>
        <dt>Parameters</dt>
        <dd>Within the sql you have access to two types of string parameters via $params.paramName.
            One set of parameters is given on start to the calculation control engine.
            The second set is derived from table entries in the row of the statement.
            Which parameters are available for the latter case depends on the setup where else start parameters can always be added.Executions can be run with free named string parameters, given on start.
            In case of conflicts, start parameters overwrite table parameters.
            In addition, the timestamp of the calculation control run start is available via $param.CCstart.</dd>
        <dt>Logical DB naming</dt>
        <dd>SQLs triggered by the scheduler can use the logical naming of Bindings, which will be replaced with the physical names by the calculation control</dd>
        <dt>Partly re-run</dt>
        <dd>Explicit runs for certain calculation id's only or for those that depend on a certain calculation can be triggered.
            This allows focused re-runs in case of issues. The triggering is done by a manual call of the engine or a one-time entry into the scheduler log.</dd>
        <dt>Error handling</dt>
        <dd>All errors are logged.
            Dependent steps can be marked to only start in case of success of the previous step or only also in case of failure.</dd>
        <dt>Sets</dt>
        <dd>To allow multiple runs of the scheduler with different, independent sets of calculations, each calculation is marked with a named categories.</dd>
      </dl>
    </Body>

    <SubChapter title="Later extensions">
      <Body>
        The following features are not yet part but will likely be made available for future versions:
        <dl>
          <dt>Parallel execution</dt>
          <dd>The scheduler can run a configurable number of calculations in parallel, still keeping track of dependencies of course. As soon as a slot becomes free, a new calculation scheduled is started.</dd>
          <dt>Visualized dependency tree</dt>
          <dd>A graphical tree showing the calculation dependencies.</dd>
          <dt>Checks</dt>
          <dd>A report can show check results. For examples statements can be test-parsed by the database to assure their correctness and hanging dependencies can be detected.</dd>
          <dt>Indicator id</dt>
          <dd>By maintaining the indicator-id along with the statement, it is possible to keep track of an indicator's up-to-date-ness.</dd>
          <dt>Notification</dt>
          <dd>Each step can be declared to send an email notification in case of error.
              Each calculation control run can send out a notification summary in any case or only in case of a failure happened during execution.</dd>
      </dl>
      </Body>
    </SubChapter>
  </Chapter>

  <Chapter title="Configuration" type="api">
    <Body>
      A calculation control run is started with at least the start-category and the configuration file as parameters.
      All statements belonging to the start category are started, statements depending on others only start after the others have finished.
      Each run gets a unique number, which is maintained in the execution history.
      <xml>
        <CalculationControl>
          <!-- Where to find control and history tables -->
          <JDBC>
            <Class>oracle.jdbc.OracleDriver</Class>
            <Url>jdbc:oracle:thin:@localhost:1521:bcddemo</Url>
            <User>scott</User>
            <Password>tiger</Password>
          </JDBC>
          <!-- Location of BindingsSets to be used for resolving logical DB names. -->
          <Bindings>
            /apps/myApp/WEB-INF/bcd/bindings
          </Bindings>
          <Notification> <!-- Where to send notifications -->
            <Email>
              <To>info@business-code.de</To>
              <Subject>Demo calculation control</Subject>
              <Url>mail.smtp.port</Url>
              <Port>888</Port>
            </Email>
          </Notification>
        </CalculationControl>
      </xml>
    </Body>
    <SubChapter title="Calculation control table">
      <Body>
        The following properties control a calculation run, the details depend on the features being available:
        <table class="propertyList">
          <tr><th>Property</th><th>Semantics</th></tr>
          <tr><td>category</td><td>Free text, limit the calculation to certain scheduler runs</td></tr>
          <tr><td>calc_id</td><td>Unique id</td></tr>
          <tr><td>is_active</td><td>Y or N.</td></tr>
          <tr><td>name</td><td>Speaking short description</td></tr>
          <tr><td>depends_on</td><td>Comma separated list of calc_ids which have to be executed successfully first</td></tr>
          <tr><td>start_after</td><td>Comma separated list of calc_ids which have to be executed first. This statement will also executed of those statements failed.</td></tr>
          <tr><td>valid from/to</td><td>Time range when to execute</td></tr>
          <tr><td>remarks</td><td>Free text field for documentation.</td></tr>
          <tr><td>sql</td><td>The SQL to be executed itself.</td></tr>
          <tr><td>immedeat_notify_on_error</td><td>If 'Y' and the statement failed, an immediate notification is send out.</td></tr>
          <tr><td>last_applied</td><td>When the calculation was actually executed last time.</td></tr>
        </table>

        The following table shows a sample setup, some obvious columns are left away, but two sample parameter columns are listed:
        <table style="display:nones;width:100%" class="sampleDbTable">
          <tr><td>category</td><td>calc_id</td><td>depends_on</td><td>param_ctr</td><td>param_center</td><td>valid_from</td><td>valid_to</td><td>remarks</td><td>sql</td><td>last_applied</td></tr>
          <tr><td>morning</td><td>1001</td><td/><td>DE</td><td></td><td>2010-01-20</td><td>2999-01-20</td><td/><td>update t_order set... where last_load&gt;$last_applied</td><td>2010-02-12 07:12:23</td></tr>
          <tr><td>*</td><td>1002</td><td>1001</td><td></td><td>SFO</td><td>2010-01-01</td><td>2999-01-20</td><td/><td>insert into t_... where last_load&gt;$last_applied</td><td>2010-02-12 07:14:23</td></tr>
          <tr><td>morning</td><td>1004</td><td></td><td></td><td>SFO, HHY</td><td>2009-11-20</td><td>2010-01-20</td><td/><td>update t_order set... where last_load&gt;$last_applied</td><td>2010-01-20 07:22:23</td></tr>
          <tr><td>evening</td><td>1005</td><td></td><td>US, DE</td><td></td><td>2010-01-20</td><td>2999-01-20</td><td>Special ... </td><td>update t_order set... where last_load&gt;$last_applied</td><td>2010-02-12 21:33:23</td></tr>
        </table>
      </Body>
    </SubChapter>


    <SubChapter title="Execution history">
      <Body>
        Two history tables are maintained. Only keeps an entry per calculation control run and the second one keeps an entry per executed statement.

        <p/>
        Calculation control run history table sample:
        <table class="sampleDbTable">
          <tr><td>run_id</td><td>category</td><td>count_calcs</td><td>sum_rows</td><td>worst_status</td><td>message</td><td>start</td><td>finish</td></tr>
          <tr><td>1231</td><td>morning</td><td>12</td><td>19742</td><td>info</td><td></td><td>2010-01-10 06:00:00</td><td>2010-01-10 07:12:33</td></tr>
          <tr><td>1232</td><td>noon</td><td>5</td><td>3876</td><td>ok</td><td></td><td>2010-01-10 12:08:00</td><td>2010-01-10 13:12:33</td></tr>
          <tr><td>1234</td><td>evening</td><td>8</td><td>1295</td><td>ok</td><td></td><td>2010-01-10 20:12:33</td><td>2010-01-10 20:18:33</td></tr>
        </table>

        Calculation control statement history table sample:
        <table class="sampleDbTable">
          <tr><td>run_id</td><td>calc_id</td><td>calc_name</td><td>timestamp</td><td>status</td><td>message</td><td>rows</td><td>sql</td></tr>
          <tr><td>1231</td><td>1001</td><td>ontime measure</td><td>2010-01-11 07:12:23</td><td>ok</td><td>ok</td><td>213</td><td>update t_order... where center='SFO' and last_load&gt;2010-01-10 07:12:33</td></tr>
          <tr><td>1231</td><td>1004</td><td>delivery</td><td>2010-01-11 07:12:23</td><td>info</td><td>no rows touched</td><td>0</td><td>insert into t_claims...</td></tr>
          <tr><td>1232</td><td>1002</td><td>dock to stock</td><td>2010-01-11 07:23:23</td><td>ok</td><td>ok</td><td>234</td><td>update t_order...</td></tr>
        </table>
      </Body>
    </SubChapter>

  </Chapter>

</Doc>