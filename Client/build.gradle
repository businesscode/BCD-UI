/*
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
//--------------------------------------------------
// Deals with js and xslt sources, mainly: file-group-packaging for js and minifying

// We cannot use the new plugins{} system as it won't support apply from: this from other build files (gradle 4.1)
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.eriwen', name: 'gradle-js-plugin',  version: '1.12.0'
  }
}
import com.eriwen.gradle.js.JsPlugin
apply plugin: JsPlugin

//------------------------------------------
// Configure node.js exec and modules local installation process
apply plugin: "com.moowork.node"
node {
  version = "4.6.0"
  // Set the work directory for unpacking node itself
  workDir = file(nodeJsDir)
}

import com.eriwen.gradle.js.tasks.*
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def bcdCopyRightText = file("$rootProject.rootDir.path/gradle/LICENSE_header.txt").text
def newLine = System.properties['line.separator']
def src3rdParty       = "$buildDir/tmp/src3rdParty"
def clientCombinedDir = "$buildDir/tmp/clientCombined"
def jsDistDir         = 'jsDist'
def es5Postfix        = '-es5'

//**********************************
// Load 3rdParty js libraries to build/node_modules with the help of package.json, which we copy to build and execute npm install there
task bcduiClient3rdPartyNpm {
  // Workaround: Due to an issue with using NpmTask from subprojects in combination with a local node installation,
  // we put the implementation to installTools.gradle
  dependsOn ":bcduiClient3rdPartyNpmHelper"
}

//**********************************
// Create a custom build of modernizr.js based on settings in gradle.properties
task bcduiClientCollect3rdPartyModernizr( type: NodeTask ) {
  dependsOn bcduiClient3rdPartyNpm

  def taskDestDir = "$src3rdParty/js/3rdParty"

  onlyIf { project.hasProperty('bcdui.3rdPartyJs.modernizr') && project.hasProperty('bcdui.3rdPartyJs.modernizr.feature-detects') }

  inputs.file rootProject.rootDir.path + "/gradle.properties"
  outputs.file "$taskDestDir/modernizr.js"

  doFirst {
    file(taskDestDir).mkdirs()
    file("$buildDir/tmp/$name").mkdirs()

    // Create a custom build file for modernizr based on gradle.properties
    def modernizsBuildTemplate = new File("$clientRoot/gradle/script/buildModernizr.js")
    def modernizsBuild = new File("$buildDir/tmp/$name/buildModernizr.js")
    modernizsBuild.text = modernizsBuildTemplate.text
    modernizsBuild.text = modernizsBuild.text.replaceAll( /.*@bcdui.3rdPartyJs.modernizr.feature-detects.*/, project.properties['bcdui.3rdPartyJs.modernizr.feature-detects'] )
  }

  // Create modernizr.js
  script = file("$buildDir/tmp/$name/buildModernizr.js")
  args   = [ "$taskDestDir/modernizr.js" ]

}



//**********************************
// Copy the 3rdParty js libs from their node_modules to build/src/3rdParty
task bcduiClientCollect3rdParty {

  dependsOn bcduiClient3rdPartyNpm, bcduiClientCollect3rdPartyModernizr

  def taskDestDir = "$src3rdParty/js/3rdParty"

  inputs.file rootProject.rootDir.path + "/gradle.properties"
  outputs.dir taskDestDir

  // Copy files that can be used 1:1 to target folder
  doLast {
    // This knows, where to find the right files for what 3rdParty lib for the easy 1:1 copy- (+maybe rename) cases
    def fileList = [ "jquery":         [ fn: "jquery.js",             ofn: "jquery/jquery.js"],
                     "block-ui":       [ fn: "jquery.blockUI.js",     ofn: "block-ui/jquery.blockUI.js" ],
                     "dot":            [ fn: "doT.js",                ofn: "dot/doT.js"],
                     "log4javascript": [ fn: "log4javascript.js",     ofn: "log4javascript/log4javascript_uncompressed.js"],
                     "webcomponents":  [ fn: "webcomponents-lite.js", ofn: "webcomponents.js/webcomponents-lite.js"],
                     "handsontable":   [ [ fn: "handsontable.js",     ofn: "handsontable/dist/handsontable.full.js"],
                                         [ fn: "handsontable.css",    ofn: "handsontable/dist/handsontable.full.css"] ],
                     "nouislider":     [ fn: "nouislider.js",         ofn: "nouislider/distribute/nouislider.js"],
                     "es6-promise":    [ fn: "es6-promise.js",        ofn: "es6-promise/dist/es6-promise.auto.min.js"],
                     "fileSaver":      [ fn: "fileSaver.js",          ofn: "file-saver/FileSaver.min.js"],
                     /* sample of having multi-file distribution set
                     "nouislider":     [ [ fn: "nouislider.js",       ofn: "nouislider/distribute/nouislider.js"],
                                         [ fn: "nouislider.css",      ofn: "nouislider/distribute/nouislider.css"] ]*/
    ]
    // Becomes only part of the assembly, if listed in gradle.properties
    fileList = fileList.findAll { project.hasProperty('bcdui.3rdPartyJs.'+it.key) }
    // collect distributables, allow recursion
    def collectDist
    collectDist = { key, value ->
      // if is array, go recursive
      if (value[0]) {
        value.each { collectDist(key, it) }
      } else { // or map
        copy {
          into taskDestDir
          from "$clientNodeModulesDir/${value.ofn}"
          rename { value.fn }
        }
      }
    }
    fileList.each collectDist

    // Optionally jquery-ui
    if( project.hasProperty('bcdui.3rdPartyJs.jquery-ui') ) {
      // Create custom jquery-ui file and copy it to target folder
      def jqeryuiVersion = project.getProperty('bcdui.3rdPartyJs.jquery-ui')
      def jqueryUiJs = new File("$taskDestDir/jquery-ui.js")
      jqueryUiJs.text = "" // clean start
      def featureListJs = project.properties['bcdui.3rdPartyJs.jquery-ui.js'].split(", |,| ")
      featureListJs.each {
        jqueryUiJs.text += file("$buildDir/node_modules/jquery-ui/ui/$it").text.replaceAll("@VERSION", jqeryuiVersion)
      }
      jqueryUiJs.text = jqueryUiJs.text.replace("*/", " * contains: " + featureListJs + newLine + " */")

      def jqueryUiCss = new File("$taskDestDir/jquery-ui.css")
      jqueryUiCss.text = "" // clean start
      def featureListCss = project.properties['bcdui.3rdPartyJs.jquery-ui.css'].split(", |,| ")
      featureListCss.each {
        jqueryUiCss.text += file("$buildDir/node_modules/jquery-ui/themes/base/$it").text.replaceAll("@VERSION", jqeryuiVersion)
      }
    }
  }
}


//**********************************
// Copies all bcdui/js and bcdui/xslt from the various places together, except bcduiLoader, which is treated seperatly
// Shrink XSLTs and other non-js for production use and put them to build/bcduiClientPrepareNonJs
task bcduiClientCollectAll( type: Copy ) {

  dependsOn ':ApisGenerator:bcduiBuild', bcduiClientCollect3rdParty

  into clientCombinedDir
  includeEmptyDirs   = false
  duplicatesStrategy = 'fail'

  from ( ['src/js', "$src3rdParty/js", "$generatedApisDir/js"] ) {
    include '**/*.js'
    into    'js'
  }
  from ( ['src/js', "$src3rdParty/js", "$generatedApisDir/js"] ) {
    exclude '**/*.js'
    into    jsDistDir
  }
  from ( ['src/xslt', "$generatedApisDir/xslt"] ) {
    into 'xslt'
  }

  exclude '**/bcduiLoader.js'

  doLast {
    //--------
    // Remove comments and empty lines from xml, xslt, add copyright
    fileTree(dir: destinationDir, exclude: "**/xslt/3rdParty/**", include: ['**/*.xml','**/*.xslt']).each { xmlSource ->
      def fileContent = xmlSource.text
      fileContent = fileContent.replaceAll(/(?s)\s*<!--.*?-->/,"");
      fileContent = fileContent.replaceAll(/\r\n( *\r\n)+/,newLine);
      fileContent = fileContent.replaceFirst(">\r\n",">"+newLine+"<!-- $bcdCopyRightText -->"+newLine)
      xmlSource.text = fileContent
    }
  }

}


//**********************************
// Merge js file units into combined files following the packaged "core, "chart", "cube" and so on
// and adjust bcduiFiles.json accordingly. This task is distribution agnostic, i.e. it includes all source packages, 'chart'...
// Input
//   the individual src/js and $generatedApisDir/js files and bcduiLoader.js
// Output per package ("core, "chart", ..)
//   a) combined but uncompressed: debug/<name>-debug.js
//   b) minified: distribution/<name>.js
//   c) source code map: docs/ <name>.sourcemap.json
// Keep the folder structure so that the sources in the maps point virtually to the original sources
task bcduiClientJsFileGroups {
  dependsOn bcduiClientCollectAll

  // bcduiFiles.json knows which files go into which bundle
  def origBcduiLoaderJsonSplit = file(jsBcduiLoaderPath).text.split("// JSON-PART-FOR-BUILD")
  def bcduiFiles = new JsonSlurper().parseText(origBcduiLoaderJsonSplit[1])

  // Some preparation
  def taskPrefix = 'bcduiClientBabelJs'
  file("$clientCombinedDir/js/3rdParty").mkdirs()

  // For each api package "core, "chart", "cube" etc (see bcduiLoader.js), we create a "bcduiClientBabelJs-chart[-es5]" etc task
  // and add them to the dependency chain in our configuration. If we are later executed, we just run them.
  // We do this also for each individual 3dParty file bit leave them separated
  bcduiFiles.groups.each { fileSet ->

    // All non-3rdParty files of a group are translated with Babel, merged into one and minified
    // We skip the 3rdParty files of a group as we keep them separate
    // Any missing file (bcduiLoader vs folder) will be reported as an error from babel
    def createBabelTask = { newTaskName, inputFiles, outFileName, ecma5, is3rdParty ->
      task(newTaskName, type: NodeTask) {
        mustRunAfter 'bcduiClientCollectAll'
        inputs.files inputFiles + "./src/js/$jsBcduiLoader"
        outputs.file file(outFileName)
        script = file("$nodeModulesDir/babel-cli/bin/babel")
        def presets = "--presets=$nodeModulesDir/babel-preset-minify" + (ecma5 ? ",$nodeModulesDir/babel-preset-es2015" : "")
        args = [] + inputFiles + "--out-file=$outFileName" + "--source-maps" + presets

        // Postpend copy right. We do not prepend it to keep the source map indices intact
        doLast {
          def outFile = file(outFileName)
          outFile.text += newLine + ( is3rdParty ? '/* For license see THIRDPARTYLICENSEREADME.txt */' : "/* $bcdCopyRightText */" )
        }
      }
    }

    // Create a task for combining, minifying and ECMA5 transpiling all non-3rdParty js in the current file group
    def fileGroupName = fileSet.id
    def inputFiles = files( fileSet.files.findAll { !it.contains("3rdParty") }.collect { fPathName ->
      "$clientCombinedDir/${fPathName}"
    })
    if( ! inputFiles.isEmpty() ) {
      dependsOn += createBabelTask("$taskPrefix-$fileGroupName$es5Postfix", inputFiles, "$clientCombinedDir/$jsDistDir/${fileGroupName}${es5Postfix}.js", true, false )
      dependsOn += createBabelTask("$taskPrefix-$fileGroupName"           , inputFiles, "$clientCombinedDir/$jsDistDir/${fileGroupName}.js",               false,  false )
    }

    // Create a task for minifying and ECMA5 transpiling each single 3rdParty js in this file group
    fileSet.files.findAll{ it.contains("3rdParty") && it.endsWith('.js') }.each { fEntry ->
      def f = file(fEntry)
      def fPathNameWoExt= f.name.lastIndexOf('.').with {it != -1 ? f.name[0..<it] : f.name}
      def outFileName = "$clientCombinedDir/$jsDistDir/3rdParty/${fPathNameWoExt}.js"
      dependsOn += createBabelTask( "$taskPrefix-$fPathNameWoExt", ["$clientCombinedDir/js/3rdParty/${fPathNameWoExt}.js"], outFileName, false, true )
      // We do not ECMA5 transpile 3dParty sources yet, so we just copy the minified version
      doLast {
        copy {
          from outFileName
          into "$clientCombinedDir/$jsDistDir/3rdParty/"
          rename { fileName ->
            fileName.replace('.js', "${es5Postfix}.js")
          }
        }
      }
    }
  }

  doLast {
    //--------
    // Now we write a new version of bcduiLoader.js, where each group is represented by just the one combined file the the group's name
    bcduiFiles.groups.each {
      // Keep 3rdParty files separate and replace - if any - all non 3rdParty by the group's name
      it.files = it.files.findAll{ it.contains("3rdParty") } + ( it.files.any{ ! it.contains("3rdParty") } ? ['/js/' + it.id + '.js'] : [] )
      it.remove('buildFolders')
    }
    def newBcduiLoader = new File("$clientCombinedDir/$jsDistDir/$jsBcduiLoader")
    newBcduiLoader.createNewFile()
    newBcduiLoader.text = origBcduiLoaderJsonSplit[0]
    newBcduiLoader << JsonOutput.toJson( bcduiFiles )
    newBcduiLoader << origBcduiLoaderJsonSplit[2]
  }
}


/**
 * Translates each JS 1:1 (not minified or combined) for ECMA5 in Internet Explorer
 * for usage in Eclipse BCD-UI injected mode, see Docu/development/eclipseInject.xml
 */
task bcduiClientEcma5One2One (type: NodeTask) {

  group       'bcd-ui/advanced'
  description 'Needed for Eclipse inject, see Docu/eclipseinject.xml'

  def taskDestDir = "$buildDir/jsEcma5One2One"
  dependsOn bcduiClientCollectAll
  inputs.dir  "./src/js"
  outputs.dir taskDestDir

  // If we are not up-to-date, cleanup before generating ECMA5
  doFirst {
    delete taskDestDir
  }

  // Job itself: Call babel
  script = file("$nodeModulesDir/babel-cli/bin/babel")
  args = [] + "$bcduiClientCollectAll.destinationDir/js" + "--quiet" + "--out-dir=$taskDestDir" + "--presets=$nodeModulesDir/babel-preset-es2015" + "--source-maps"

  // 1. We do not apply ECMA5 babel to 3rdParty resources (also has issues with ecma6Polyfills and webcomponent), so we overwrite them here with the originals
  // 2. We do neet to add es5Postfix to js, map and change the map entry in js
  doLast {
    copy {
      from "src/js/3rdParty"
      from "$src3rdParty/js/3rdParty"
      into "$taskDestDir/3rdParty"
    }
    delete  fileTree("$taskDestDir/3rdParty") { include '**/*.js.map' }
    //--------
    fileTree(dir: taskDestDir).each { source ->
      if( source.name.endsWith('.js') ) {
        source.text = source.text.replaceAll(/sourceMappingURL=(.*)\.js\.map/, { full, fn -> "sourceMappingURL=$fn${es5Postfix}.js.map" } )
      }
      source.renameTo( source.path.replace('.js', "${es5Postfix}.js") )
    }
  }

}

//*********************************
// Create a jar containing BCD Client sources
// When being deployed, it relies in StaticResourceServlet in BCD-UI-Server.jar to be found in jar
task bcduiDist(type: Jar) {

  dependsOn bcduiClientJsFileGroups

  baseName = "$artifactsBaseName-client"
  version  = bcduiVersion
  destinationDir = file("$buildDir/libs")

  from( "$clientCombinedDir/$jsDistDir" ) {
    into    'bcdui/js'
    exclude '**/*.js.map'
  }
  from( "$clientCombinedDir/xslt" ) {
    into    'bcdui/xslt'
  }

  manifest {
    attributes( bcduiManifestAttributes() )
  }
  metaInf {
    from bcduiMetaInf
  }
}

//*********************************
// Create a jar containing source map BCD Client sources
task bcduiDebugDist(type: Jar) {

  dependsOn bcduiClientJsFileGroups

  baseName = "$artifactsBaseName-client-debug"
  version  = bcduiVersion
  destinationDir = file("$buildDir/libs")

  from( "$clientCombinedDir/$jsDistDir" ) {
    into    'bcdui/js'
    include '**/*.js.map'
  }

  manifest {
    attributes( bcduiManifestAttributes() )
  }
  metaInf {
    from bcduiMetaInf
  }
}


//************************************
// Clean artifacts excluding node_modules
task bcduiClean {
  group "bcd-ui"
  doFirst {
    if( !file(buildDir).exists() )
      return;
    buildDir.eachDir {
      if( it.name == 'node_modules' )
        return
      it.deleteDir()
    }
    buildDir.eachFile {
      it.delete()
    }
  }
}

//************************************
// Clean 3rdParty artifacts
task bcduiClean3rdParty( type: Delete ) {
  group "bcd-ui/advanced"
  delete buildDir
}

//************************************
// Do all for what gradle 'Client' project is responsible for
task bcduiBuild {
  dependsOn bcduiDist
}
