/*
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
//--------------------------------------------------
// Deals with js and xslt sources, mainly: file-group-packaging for js and minifying

// We cannot use the new plugins{} system as it won't support importing via 'apply from:' (gradle 7)
buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
  }
}
apply plugin: 'com.github.node-gradle.node'

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def bcdCopyRightText = file("$rootProject.rootDir.path/gradle/LICENSE_header.txt").text
def newLine = System.properties['line.separator']
def src3rdParty       = "$buildDir/tmp/src3rdParty"
def clientCombinedDir = "$buildDir/tmp/clientCombined"
def jsDistDir         = 'jsDist'
def es5Postfix        = '-es5'

// This knows, where to find the right files for what 3rdParty lib for the easy 1:1 copy- (+maybe rename) cases
// This list is filtered by the entries in gradle.properties so that a user can remove them to get another version manually for example
def js3rdPartyNpm = [
      "jquery":         [ fn: "jquery.js",             ofn: "jquery/dist/jquery.js",                         ofnm: "jquery/dist/jquery.min.js"],
      "jquery-ui-dist": [ [ fn: "jquery-ui.js",        ofn: "jquery-ui-dist/dist/jquery-ui.js",              ofnm: "jquery-ui-dist/dist/jquery-ui.min.js"],
                          [ fn: "jquery-ui.css",       ofn: "jquery-ui-dist/dist/themes/base/jquery-ui.css"],
                          [ fn: "images",              ofn: "jquery-ui-dist/dist/themes/base/images"]
                        ],
      "block-ui":       [ fn: "jquery.blockUI.js",     ofn: "block-ui/jquery.blockUI.js" ],
      "dot":            [ fn: "doT.js",                ofn: "dot/doT.js",                                    ofnm: "dot/doT.min.js"],
      "log4javascript": [ fn: "log4javascript.js",     ofn: "log4javascript/log4javascript_uncompressed.js", ofnm: "log4javascript/log4javascript.js"],
      "webcomponents":  [ fn: "webcomponents-lite.js", ofn: "webcomponents/webcomponents-lite.js"],
      "handsontable":   [ [ fn: "handsontable.js",     ofn: "handsontable/dist/handsontable.full.js",        ofnm: "handsontable/dist/handsontable.full.min.js"],
                          [ fn: "handsontable.css",    ofn: "handsontable/dist/handsontable.full.css"] ],
      "nouislider":     [ fn: "nouislider.js",         ofn: "nouislider/distribute/nouislider.js"],
      "core-js-bundle": [ fn: "core-js-bundle.js",     ofn: "core-js-bundle/index.js",                       ofnm: "core-js-bundle/minified.js"],
      "fileSaver":      [ fn: "fileSaver.js",          ofn: "fileSaver/dist/FileSaver.js",                   ofnm: "fileSaver/dist/FileSaver.min.js"],
      "d3-format":      [ fn: "d3-format.js",          ofn: "d3-format/dist/d3-format.js",                   ofnm: "d3-format/dist/d3-format.min.js"],
      "echarts":        [ fn: "echarts.js",            ofn: "echarts/dist/echarts.js",                       ofnm: "echarts/dist/echarts.min.js"]
    ]
js3rdPartyNpm = js3rdPartyNpm.findAll { project.hasProperty('bcdui.3rdPartyJs.'+it.key) }

def copyUnmodified = ["xlsx.full.min.js": [ofn: "src/js/3rdParty/xlsx.full.min.js"]]

// list 3rdParty folders (src/js/3rdPary) which should be taken 1:1 into the jar
def unmodified3rdPartyFolders = ["ckeditor"]
def explicitlyCreateES5 = ["ckeditor/ckeditorPackage/ckeditor.js", "ckeditor/ckeditor_jqueryPlugin.js"]

//**********************************
// Install node modules for our runtime. Needed for the (client) distribution
// (as opposed to those neede for the build, which are handled in installTools.gradle)
def clientNodeModulesDir  = "$clientRoot/build/node_modules"
task bcduiClient3rdPartyNpm( type: NpmTask ) {

  outputs.upToDateWhen { file(clientNodeModulesDir).exists() &&  file(clientNodeModulesDir).list().length > 0 }

  // Not everybody importing this script, needs this
  onlyIf { file("$clientRoot/gradle/script/package.json").exists() }

  doFirst {
    // Create a package.json for npm in buildDir based on out template
    new File(clientNodeModulesDir).mkdirs()
    def packageJson = new JsonSlurper().parseText( file("$clientRoot/gradle/script/package.json").text )
    def iterator = packageJson.dependencies.iterator()
    // Replace @version of the 3rdParty libs by the values provided by the user.
    // Remove unwanted 3rdParty libs entries
    while( iterator.hasNext() ) {
      def entry = iterator.next()
      if( !project.hasProperty('bcdui.3rdPartyJs.'+entry.key) ) {
        iterator.remove()
        continue
      }
      entry.value = entry.value.replace( '@version', project.getProperty('bcdui.3rdPartyJs.'+entry.key ) )
    }
    def packageJsonFile = new File("$clientRoot/build/package.json")
    packageJsonFile.text = JsonOutput.prettyPrint( JsonOutput.toJson( packageJson ) )
  }

  // We want local node_modules to be below build folder
  execOverrides {
    it.workingDir = file("$clientRoot/build")
  }

  args = ['install']
}


//**********************************
// Create a custom build of modernizr.js based on settings in gradle.properties
task bcduiClientCollect3rdPartyModernizr( type: NodeTask ) {
  dependsOn bcduiClient3rdPartyNpm

  ext {
    taskDestDir = "$src3rdParty/js/3rdParty"
  }

  onlyIf { project.hasProperty('bcdui.3rdPartyJs.modernizr') && project.hasProperty('bcdui.3rdPartyJs.modernizr.feature-detects') }

  inputs.file rootProject.rootDir.path + "/gradle.properties"
  outputs.file "$taskDestDir/modernizr.js"

  file(taskDestDir).mkdirs()
  file("$buildDir/tmp/$name").mkdirs()

  // Create a custom build file for modernizr based on gradle.properties
  def modernizsBuildTemplate = new File("$clientRoot/gradle/script/buildModernizr.js")
  if(modernizsBuildTemplate.exists()) {
    def modernizsBuild = new File("$buildDir/tmp/$name/buildModernizr.js")
    modernizsBuild.text = modernizsBuildTemplate.text
    modernizsBuild.text = modernizsBuild.text.replaceAll( /.*@bcdui.3rdPartyJs.modernizr.feature-detects.*/, project.properties['bcdui.3rdPartyJs.modernizr.feature-detects'] )
  }

  // Create modernizr.js
  script = file("$buildDir/tmp/$name/buildModernizr.js")
  args   = [ "$taskDestDir/modernizr.js" ]

}



//**********************************
// Copy unminified the 3rdParty js libs from their node_modules to build/src/3rdParty
task bcduiClientCollect3rdParty {

  dependsOn bcduiClient3rdPartyNpm, bcduiClientCollect3rdPartyModernizr

  def taskDestDir = "$src3rdParty/js/3rdParty"

  inputs.file rootProject.rootDir.path + "/gradle.properties"
  outputs.dir taskDestDir

  // Copy files that can be used 1:1 to target folder
  doLast {
    // collect distributables, allow recursion
    def collectDist
    collectDist = { keyOrParentKey, value ->
      // if is array, go recursive
      if (value[0]) {
        value.each { collectDist(keyOrParentKey, it) }
      } else {
        // if we specified a folder, copy it
        if (new File("$clientNodeModulesDir/${value.ofn}").isDirectory()) {
		  copy {
		    from  "$clientNodeModulesDir/${value.ofn}"
		    into "$taskDestDir/${value.fn}"
		  }
        }
        // otherwise map files
        else {
          copy {
            into taskDestDir
            from "$clientNodeModulesDir/${value.ofn}"
            rename { value.fn }
          }
        }
      }
    }
    js3rdPartyNpm.each collectDist
  }
}


//**********************************
// Copies all bcdui/js and bcdui/xslt from the various places together, except bcduiLoader, which is treated separately
// Shrink XSLTs and other non-js for production use and put them to build/bcduiClientPrepareNonJs
task bcduiClientCollectAll( type: Copy ) {

  dependsOn ':ApisGenerator:bcduiBuild', bcduiClientCollect3rdParty

  into clientCombinedDir
  includeEmptyDirs   = false
  duplicatesStrategy = 'fail'

  from ( ['src/js', "$src3rdParty/js", "$generatedApisDir/js"] ) {
    include '**/*.js'
    into    'js'
  }
  from ( ['src/js', "$src3rdParty/js", "$generatedApisDir/js"] ) {
    exclude '**/*.js'
    into    jsDistDir
  }
  from ( ['src/xslt', "$generatedApisDir/xslt"] ) {
    into 'xslt'
  }

  exclude '**/bcduiLoader.js'

  doLast {

    // copy js files from unmodified3rdPartyFolders 1:1 directly
    unmodified3rdPartyFolders.each { folder ->
      fileTree(dir: 'src/js/3rdParty/' + folder, include: ['**/*.js']).each { jsFile ->
        def path = jsFile.path.replace("\\", "/");
        def target = jsFile.path.substring(path.indexOf("src/js/3rdParty/") + "src/js/3rdParty/".length());
        copy {
          from jsFile.path
          into "$clientCombinedDir/$jsDistDir/3rdParty/" + target.substring(0, target.indexOf(jsFile.name))
        }
        // only create es5 files for explictly listed ones
        explicitlyCreateES5.each { es5 ->
          if (path.contains(es5)) {
            copy {
              from jsFile.path
              into "$clientCombinedDir/$jsDistDir/3rdParty/" + target.substring(0, target.indexOf(jsFile.name))
              rename { fileName -> fileName.replace('.js', "${es5Postfix}.js") }
            }
          }
        }
      }
    }

    //--------
    // Remove comments and empty lines from xml, xslt, add copyright
    fileTree(dir: destinationDir, exclude: "**/xslt/3rdParty/**", include: ['**/*.xml','**/*.xslt']).each { xmlSource ->
      def fileContent = xmlSource.text
      fileContent = fileContent.replaceAll(/(?s)\s*<!--.*?-->/,"");
      fileContent = fileContent.replaceAll(/\r\n( *\r\n)+/,newLine);
      fileContent = fileContent.replaceFirst(">\r\n",">"+newLine+"<!-- $bcdCopyRightText -->"+newLine)
      xmlSource.text = fileContent
    }
  }

}


//**********************************
// Merge js file units into combined files following the packaged "core, "chart", "cube" and so on
// and adjust bcduiFiles.json accordingly. This task is distribution agnostic, i.e. it includes all source packages, 'chart'...
// Input
//   the individual src/js and $generatedApisDir/js files and bcduiLoader.js
// Output per package ("core, "chart", ..)
//   a) combined but uncompressed: debug/<name>-debug.js
//   b) minified: distribution/<name>.js
//   c) source code map: docs/ <name>.sourcemap.json
// Keep the folder structure so that the sources in the maps point virtually to the original sources
task bcduiClientJsFileGroups {
  dependsOn bcduiClientCollectAll, bcduiClientCollect3rdPartyModernizr

  // bcduiFiles.json knows which files go into which bundle
  def origBcduiLoaderJsonSplit = file(jsBcduiLoaderPath).text.split("// JSON-PART-FOR-BUILD")
  def bcduiFiles = new JsonSlurper().parseText(origBcduiLoaderJsonSplit[1])

  // Some preparation
  def taskPrefix = 'bcduiClientBabelJs'
  file("$clientCombinedDir/js/3rdParty").mkdirs()

  // A babel task for combining multiple files, minifying and optional ecma6-transpiling
  def createBabelTask = { String newTaskName, inputFiles, outFileName, ecma5, is3rdParty ->
    task(newTaskName, type: NodeTask) {
      mustRunAfter 'bcduiClientCollectAll'
      inputs.files inputFiles + "./src/js/$jsBcduiLoader"
      outputs.file file(outFileName)
      script = file("$nodeModulesDir/@babel/cli/bin/babel.js")
      def presets = "--presets=$nodeModulesDir/babel-preset-minify" + (ecma5 ? ",$nodeModulesDir/@babel/preset-env" : "")
      args = [] + inputFiles + "--out-file=$outFileName" + "--source-maps" + presets

      // Postpend copy right. We do not prepend it to keep the source map indices intact
      doLast {
        def outFile = file(outFileName)
        if (! is3rdParty) {
          outFile.text = outFile.text.replace('"use strict";', "")
          outFile.text = '"use strict";' + outFile.text
        }
        outFile.text += newLine + ( is3rdParty ? '/* For license see THIRDPARTYLICENSEREADME.txt */' : "/* $bcdCopyRightText */" )
      }
    }
  }

  // All non 3rd-party files are handled here
  // Create one babel task and output file for all non-3rd-party files in a filegroup including ecma-6 transpiling
  bcduiFiles.groups.each { fileSet ->

    // Create a task for combining, minifying and ECMA5 transpiling all non-3rdParty js in the current file group
    def fileGroupName = fileSet.id
    def inputFiles = files( fileSet.files.findAll { !it.contains("3rdParty") }.collect { fPathName ->
      "$clientCombinedDir/${fPathName}"
    }).collect{it.absolutePath}
    if( ! inputFiles.isEmpty() ) {
      dependsOn += createBabelTask("$taskPrefix-$fileGroupName$es5Postfix", inputFiles, "$clientCombinedDir/$jsDistDir/${fileGroupName}${es5Postfix}.js", true, false )
      dependsOn += createBabelTask("$taskPrefix-$fileGroupName"           , inputFiles, "$clientCombinedDir/$jsDistDir/${fileGroupName}.js",              false, false )
    }
  }

  // All 3rdparty files are handled here
  // Where possible we take the minified file from the node.js dist, otherwise we minify ourselfs. We do not ECMA5 transpile 3rdParty files.
  def collectMinified
  collectMinified = { keyOrParentKey, value ->
    if (value[0]) {
      // If is array, go recursive
      value.each { collectMinified( keyOrParentKey, it ) }
    }
    else if( ! value.fn.endsWith(".js") ) {
      return
    }
    else if( value.ofnm ) {
      // If the dist contains a min file, use that one, plus create a 1:1 copy with es5 postfixed file name
      // doLast: Don't actually apply this now (during gradle dependency setup), but only once this task is actually executed and all it depends on finished
      bcduiClientJsFileGroups.doLast {
        copy {
          from "$clientNodeModulesDir/${value.ofnm}"
          into "$clientCombinedDir/$jsDistDir/3rdParty/"
          rename { value.fn }
        }
        copy {
          from "$clientNodeModulesDir/${value.ofnm}"
          into "$clientCombinedDir/$jsDistDir/3rdParty/"
          rename { value.fn.replace('.js', "${es5Postfix}.js") }
        }
      }
    }
    else if (copyUnmodified[value.fn]) {
      // in case we want to explicitly keep a file 1:1 (no minimize, no ECMA5 transpile, we copy it
      copy {
        from "$buildDir/../${copyUnmodified[value.fn].ofn}"
        into "$clientCombinedDir/$jsDistDir/3rdParty/"
        rename { value.fn }
      }
      copy {
        from "${copyUnmodified[value.fn].ofn}"
        into "$clientCombinedDir/$jsDistDir/3rdParty/"
        rename { value.fn.replace('.js', "${es5Postfix}.js") }
      }
    }
    // Otherwise we create a minified version ourselfs with the help from babel
    else {
      def f = file(value.fn)
      def fPathNameWoExt= f.name.lastIndexOf('.').with {it != -1 ? f.name[0..<it] : f.name}
      def outFileName = "$clientCombinedDir/$jsDistDir/3rdParty/${fPathNameWoExt}.js"
      // We do not ECMA5 transpile 3dParty sources, we just create a minified version
      dependsOn += createBabelTask( "$taskPrefix-$fPathNameWoExt", ["$clientCombinedDir/js/3rdParty/${fPathNameWoExt}.js"], outFileName, false, true )
      doLast {
        copy {
          from outFileName
          into "$clientCombinedDir/$jsDistDir/3rdParty/"
          rename { fileName ->
            fileName.replace('.js', "${es5Postfix}.js")
          }
        }
      }
    }
  }

  // Handle 3rdParty files of the project
  bcduiFiles.groups.each { fileSet ->
    fileSet.files.findAll { it.contains("3rdParty") && it.endsWith('.js') }.each { fName ->

      // ignore js files in folders which are listed in unmodified3rdPartyFolders (they are copied 1:1 via bcduiClientCollectAll)
      def skip = false;
      unmodified3rdPartyFolders.each { ignore -> skip |= fName.startsWith("/js/3rdParty/" + ignore); }

  	  if (! skip) {
        fName = fName.lastIndexOf('/').with {it != -1 ? fName[it+1..<fName.length()] : fName}
        def fPathNameWoExt = fName.lastIndexOf('.').with {it != -1 ? fName[0..<it] : fName}
        def found = false;
  
        // compare loader filename against  js3rdPartyNpm fn names to determine key of to-be-minified packages
        for (js3rdParty in js3rdPartyNpm) {
  
          if (js3rdParty.value[0]) {
            // we're assuming that we only have 1 level deep arrays
            for (inner in js3rdParty.value) {
              if (inner.fn == fName) {
                collectMinified( js3rdParty.key, inner )
                found = true;
              }
            }
          }
          else if (js3rdParty.value.fn == fName) {
            collectMinified( js3rdParty.key, js3rdParty.value )
            found = true;
          }
        }
  
        // not in js3rdPartyNpm array, so add a dummy 1:1 one in the array for later use
        if (!found) {
          collectMinified( fPathNameWoExt, [ fn: "${fPathNameWoExt}.js", ofn: "${fPathNameWoExt}.js"] )
        }
      }
    }
  }

  //js3rdParty = fileTree("$taskDestDir/3rdParty") { include '**/*.js.map' }
  //js3rdParty.each collectMinified
  // We need a special handling here, as modernizr comes a different way then our or all other 3rdParty files
  //collectMinified( "modernizr", [ fn: "modernizr.js", ofn: "../tmp/src3rdParty/modernizr.js"] )

  doLast {
    //--------
    // Now we write a new version of bcduiLoader.js, where each group is represented by just the one combined file the the group's name
    bcduiFiles.groups.each {
      // Keep 3rdParty files separate and replace - if any - all non 3rdParty by the group's name
      it.files = it.files.findAll{ it.contains("3rdParty") } + ( it.files.any{ ! it.contains("3rdParty") } ? ['/js/' + it.id + '.js'] : [] )
      it.remove('buildFolders')
    }
    def newBcduiLoader = new File("$clientCombinedDir/$jsDistDir/$jsBcduiLoader")
    newBcduiLoader.createNewFile()
    newBcduiLoader.text = origBcduiLoaderJsonSplit[0]
    newBcduiLoader << JsonOutput.toJson( bcduiFiles )
    newBcduiLoader << origBcduiLoaderJsonSplit[2]
  }
}


/**
 * Translates each JS 1:1 (not minified or combined) for ECMA5 in Internet Explorer
 * for usage in Eclipse BCD-UI injected mode, see Docu/development/eclipseInject.xml
 */
task bcduiClientEcma5One2One (type: NodeTask) {

  group       'bcd-ui/advanced'
  description 'Needed for Eclipse inject, see Docu/eclipseinject.xml'

  def taskDestDir = "$buildDir/jsEcma5One2One"
  dependsOn bcduiClientCollectAll
  inputs.dir  "./src/js"
  outputs.dir taskDestDir

  // If we are not up-to-date, cleanup before generating ECMA5
  doFirst {
    delete taskDestDir
  }

  // Job itself: Call babel and put individual ecma6 files to taskDestDir (excluding 3rdParty, they are copied below)
  script = file("$nodeModulesDir/@babel/cli/bin/babel.js")
  args = [] + "$bcduiClientCollectAll.destinationDir/js" + "--quiet" + "--out-dir=$taskDestDir" + "--presets=$nodeModulesDir/@babel/preset-env" + "--source-maps" +
          "--ignore" + "$bcduiClientCollectAll.destinationDir/js/3rdParty/*.js"

  // 1. We do not apply ECMA5 babel to 3rdParty resources (also has issues with ecma6Polyfills and webcomponent), so we overwrite them here with the originals
  // 2. We do neet to add es5Postfix to js, map and change the map entry in js
  doLast {
    copy {
      from "src/js/3rdParty"
      from "$src3rdParty/js/3rdParty"
      into "$taskDestDir/3rdParty"
    }
    delete fileTree("$taskDestDir/3rdParty") { include '**/*.js.map' }
    //--------
    fileTree(dir: taskDestDir).each { source ->
      if( source.name.endsWith('.js') ) {
        String content = source.getText("UTF-8")
        content = content.replaceAll(/sourceMappingURL=(.*)\.js\.map/, { full, fn -> "sourceMappingURL=$fn${es5Postfix}.js.map" } )
        source.write(content, "UTF-8")
      }
      source.renameTo( source.path.replace('.js', "${es5Postfix}.js") )
    }
  }

}

//*********************************
// Create a jar containing BCD Client sources
// When being deployed, it relies in StaticResourceServlet in BCD-UI-Server.jar to be found in jar
task bcduiDist(type: Jar) {

  dependsOn bcduiClientJsFileGroups

  archiveBaseName = "$artifactsBaseName-client"
  archiveVersion  = bcduiVersion
  destinationDirectory = file("$buildDir/libs")

  from( "$clientCombinedDir/$jsDistDir" ) {
    into    'bcdui/js'
    exclude '**/*.js.map'
  }
  from( "$clientCombinedDir/xslt" ) {
    into    'bcdui/xslt'
  }

  manifest {
    attributes( bcduiManifestAttributes() )
  }
  metaInf {
    from bcduiMetaInf
  }
}

//*********************************
// Create a jar containing source map BCD Client sources
task bcduiDebugDist(type: Jar) {

  dependsOn bcduiClientJsFileGroups

  archiveBaseName = "$artifactsBaseName-client-debug"
  archiveVersion  = bcduiVersion
  destinationDirectory = file("$buildDir/libs")

  from( "$clientCombinedDir/$jsDistDir" ) {
    into    'bcdui/js'
    include '**/*.js.map'
  }

  manifest {
    attributes( bcduiManifestAttributes() )
  }
  metaInf {
    from bcduiMetaInf
  }
}


//************************************
// Clean artifacts excluding node_modules
task bcduiClean {
  group "bcd-ui"
  doFirst {
    if( !file(buildDir).exists() )
      return;
    buildDir.eachDir {
      if( it.name == 'node_modules' )
        return
      it.deleteDir()
    }
    buildDir.eachFile {
      it.delete()
    }
  }
}

//************************************
// Clean 3rdParty artifacts
task bcduiClean3rdParty( type: Delete ) {
  group "bcd-ui/advanced"
  delete buildDir
}

//************************************
// Do all for what gradle 'Client' project is responsible for
task bcduiBuild {
  dependsOn bcduiDist
}
