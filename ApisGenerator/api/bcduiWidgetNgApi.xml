<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2022 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Root title="Widget Ng">
  <!--
    widgets API definition document
   -->
  <WorkingDraft>
    <!-- schema validation sample: widgedPackage.js / _schema_createInputField_args -->
    <BcdAPI>
      <ApiTypes>
        <Type name="boolean">
          <Doc>a boolean value (true|false)</Doc>
        </Type>
        <Type name="string">
          <Doc>an arbitrary string</Doc>
        </Type>
        <Type name="xPath">
          <Doc>an arbitrary xpath allowing $ references i.e. $guiStatus</Doc>
        </Type>
        <Type name="integer">
          <Doc>an integer number</Doc>
        </Type>
        <Type name="i18nToken">
          <Doc>a string value which is either taken as-is or an i18n key-marker as proposed by
          "Unicode Language Tags", although "deprecated" in its role it would suit here best. See http://www.unicode.org/faq/languagetagging.html and
          http://www.utf8-chartable.de/unicode-utf8-table.pl, we use xE0FF marker for it, i.e.:
          @caption="data" - means, the widget should treat caption value 'data' literal
          @caption="\uE0FFdata" - means, the widget should treat caption value 'data' as i18n-key
          In JS this marker is available via bcdui.i18n.TAG
          </Doc>
        </Type>
        <Type name="function">
          <Doc>
            JS function reference i.e: function(){console.info(5)}
          </Doc>
        </Type>
      </ApiTypes>


      <!--
        abstracted configuration API, each widget implementation shall implement. A specific Widget must not provide its own API,
        instead implement one listed here, APIs here are allowed to be extended or new to be created.
      -->
      <Api name="widget">
        <ApiChange since="4.3.3">@targetModelId deprecated</ApiChange>
        <Param name="id" type="string">
          <Doc>
          Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API,
          the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
          </Doc>
        </Param>
        <Param name="tabindex" type="integer">
          <Doc>the HTML compliant tabIndex</Doc>
        </Param>
        <Param name="hint" type="i18nToken">
          <Doc>
            A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it.
            image aus theme intern handled by tooltip.
          </Doc>
          <ImplDoc>
            BCD-UI fly-over
          </ImplDoc>
        </Param>
        <Param name="displayBalloon" type="boolean" default="false">
          <Doc>
            hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally,
            they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and
            appears as long as the widget has focus.
          </Doc>
        </Param>
        <Param name="autofocus" type="boolean">
          <Doc>requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so
          in case the focus is requested by many widgets it is undefined which one will win.</Doc>
          <Impl>
            <Doc>
              Custom in case of non-HTML5
            </Doc>
          </Impl>
        </Param>
        <Param name="targetHtmlElementId" type="string" deprecated="4.6">
          <Doc>The ID of (!existing) HTML element this widget should be attached to. This is API of a factory! A widget is always created from HTML DOM element.</Doc>
        </Param>
        <Param name="targetHtml" type="targetHtmlRef">
          <Doc>An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.</Doc>
        </Param>
        <Param name="disabled" type="boolean" default="false">
          <Doc>All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot
          be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12</Doc>
        </Param>
        <Param name="widgetCaption" type="string">
          <Doc>A caption which is used as prefix for navPath generation for this widget.</Doc>
        </Param>
        <Param name="enableNavPath" type="boolean" default="false">
          <Doc>Set to true if widget should be added to navpath handling.</Doc>
        </Param>
      </Api>


      <Api name="button" extends="widget">
        <ApiChange since="4.3.3">
          @caption renamed to @text but still provided due to backwards compatibility, @caption overrides the @text
          removed attributes:
          @status, @name and @contextPath
        </ApiChange>
        <Doc>A BCD-UI button (not HTML native) conforming to the theme. If an optionsModelXPath is given, it will be rendered as a dropDown button.</Doc>
        <Param name="text" type="i18nToken" required="false">
          String with the caption or an i18n-key-identifier.
        </Param>
        <Param name="caption" type="i18nToken" required="false">
          String with the caption or an i18n-key-identifier. Overrides 'text' attribute
        </Param>
        <Param name="onClickAction" type="function" required="false" isJSPChild="true">
          <Doc>Function to execute on click. Behaves like addEventListener, i.e. it expects a reference to a function.
            "onClickAction:&amp;#160;bcdui.core.lifecycle.applyAction" or "onClickAction:&amp;#160;function(){&amp;#160;alert("Hello");&amp;#160;}".
            The context of the function is set to the element this widget it attached to.
            To provide a context and parameters to the called function use bind: "onClickAction:&amp;#160;myFunc.bind(&amp;#160;ctx,&amp;#160;param1&amp;#160;, param2&amp;#160;)".
            In case of declarative environments, like HTML5 Custom Element &amp;lt;bcd-buttongNg&amp;gt;, it is a string with executable javascript code
            "onClickAction=&amp;#160;'bcdui.core.lifecycle.applyAction();'".
          </Doc>
        </Param>
        <Param name="stayPressed" type="boolean" required="false">
          <Doc>button stays pressed and is disabled until page reload.</Doc>
        </Param>
        <Param name="href" type="url" required="false">
          <Doc>HTML href</Doc>
        </Param>
        <Param name="optionsModelXPath" type="xPath">
          <Doc>xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports
          cross references between models, i.e. $options / * / Value[@id = $guiStatus / * / MasterValue]</Doc>
        </Param>
        <Param name="optionsModelRelativeValueXPath" type="xPath" default=".">
          <Doc>
            xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined,
            values referenced by optionsModelXPath are treated as captions. Wins over @caption and @ignoreCaption param.
          </Doc>
        </Param>
      </Api>


      <Api name="baseInput" extends="widget">
        <ApiChange since="4.3.3">
          @mandatory renamed to @required
          @readonly is deprecated
        </ApiChange>
        <Doc>
          Accepts a value and writes to given targetModelXPath. The implementation may or may not provide additional input validation.
          Additionally, the implementation ALWAYS checks the @bcdIsValid attribute at the target data node - as referenced by targetModelXPath.
          In case @bcdIsValid is set, the implementation HAS to display and invalid input to the user (which is the content of the @bcdIsValid attribute, and may be i18nToken)
          and accept a valid input and thus clearing that @bcdIsValid attribute on the target node.
        </Doc>
        <Param name="targetModelXPath" required="true" type="writableModelXPath">
          <Doc>
            The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML
            format of data written is implemented by individual widget.
            If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
          </Doc>
        </Param>
        <Param name="keepEmptyValueExpression" type="boolean" default="false">
          <Doc>A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty.
            TODO: better spec
          </Doc>
        </Param>
        <Param name="required" type="boolean" default="false">
          <Doc>An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.</Doc>
        </Param>
        <Param name="disableResetControl" type="boolean" default="true">
          <Doc>set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.</Doc>
          <Impl>
            <Doc>Background image for Input, can be button in more complex cases. Need to resolve conflict for IE 10</Doc>
          </Impl>
        </Param>
      </Api>


      <Api name="dateInput" extends="baseInput hasLabel">
        <Doc>
          Date picker for temporal types supports native html5 widget and fallsback to custom implementation in case browser
          does not support it.
        </Doc>
        <Param name="type" type="enum" value="date|yrMonth" default="date">
          <Doc>
            Select a calendar year and a month or a date.
            Uses HTML5 native if available. For other cases two or three single selects next to each other.
            Writes XML format 2013-12[-01]. (gYearMonth or date)
          </Doc>
        </Param>
      </Api>


      <Api name="periodChooser" extends="baseInput">
        <Doc>
          Allow to enter a date/time into special input fields or pick it from a calendar,
          this widget also allows to select ranges of same types (i.e. Date, Time or DateTime)
          TODO describe output format
        </Doc>
        <ApiChange since="4.3.3">
        removed attributes:
        @outputPeriodType
        @textInput
        @validate
        </ApiChange>
        <Param name="buttonCaption" type="i18nToken" default="Date">
          <Doc>
            default 'Date', it will be used as i18n key to translate the caption
            if isFreeRangeSelectable set to true, then caption may contain two terms for 'From' and 'To' captions. Divider: ';' Example: caption = 'i18.md.From;i18.md.To'
          </Doc>
        </Param>
        <Param name="isSecondSelectable" type="boolean"/>
        <Param name="isMinuteSelectable" type="boolean"/>
        <Param name="isHourSelectable" type="boolean"/>
        <Param name="isDaySelectable" type="boolean"/>
        <Param name="isWeekSelectable" type="boolean"/>
        <Param name="isMonthSelectable" type="boolean"/>
        <Param name="isQuarterSelectable" type="boolean"/>
        <Param name="isYearSelectable" type="boolean"/>
        <Param name="firstSelectableDay" type="string">
          <Doc>The first day that can be selected. A week or month can only be selected if all days are selectable.</Doc>
        </Param>
        <Param name="lastSelectableDay" type="string" required="false">
          <Doc>The last day that can be selected. A week or month can only be selected if all days are selectable.</Doc>
        </Param>
        <Param name="showPrevNextButtons" type="boolean" required="false"/>
        <Param name="isFreeRangeSelectable" type="boolean" required="false"/>
      </Api>


      <Api name="textInput" extends="baseInput">
        <Param name="maxlength" type="integer">
          <Doc>if defined, limits the input to the given length.</Doc>
        </Param>
        <Param name="setCursorPositionAtEnd" type="boolean" default="false">
          <Doc>if set the cursor position will always be at the end of the input once the input field gets a focus</Doc>
        </Param>
        <Param name="isTextSelectedOnFocus" type="boolean" default="false">
          <Doc>if set, the text will be selected once the field gets a focus, so that further user input will replace the content.
          In case 'setCursorPositionAtEnd' is also set to true - this option has precedence.
          </Doc>
        </Param>
        <Param name="placeholder" type="i18nToken">
          <Doc>A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.</Doc>
          <Impl><Doc>Native where exists, otherwise custom</Doc></Impl>
        </Param>
        <Param name="doTrimInput" type="boolean" default="false">
          <Doc>If enabled, the input is trimms leading/trailing spaces before writing to data model</Doc>
        </Param>
      </Api>

      <Api name="hasLabel">
        <Doc>
          This API provides .label parameter enabling form-group and placing label binding with an input of a widget
        </Doc>
        <Param name="label" type="i18nToken">
          <Doc>If provided, enables widget to render a label element</Doc>
        </Param>
      </Api>

      <Api name="hasValidator">
        <Doc>
          This API provides general RegExp validation and provides support to attach custom validators
        </Doc>
        <Param name="isSync" type="boolean" default="false">
          <Doc>Uses synchronously validation when set to true. This also disables the use of asyncValidationFunction. Only necessary for setups where you can't handle waiting for the async write of data (e.g. grid widgets)</Doc>
        </Param>
        <Param name="pattern" type="string">
          <Doc>regular expression pattern to validate the input</Doc>
        </Param>
        <Param name="validationFunction" type="string">
          <Doc>
            Name of a widget validator function which will be attached additionally to implicit validators.
            the API of given function is:

            validatorFunction(htmlElementId) : returns either NULL or object containing validationMessage (String or array of Strings) property, i.e. { validationMessage : String } or { validationMessage[] : String[] },
            the validationMessage carries the message to be displayed to the user. The String may start with bcdui.i18n.TAG character
            to classify an i18n-key of the message, rather than a message itself.

            the args parameter is the htmlElementId of the widget to validate. Please use:
            bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId) to properly retrieve widgets value.

            There is only one validator function allowed. In order to use or re-use or combine existing validations please do so in your validationFunction
            (that is delegate to other validators) and simply aggregate validation results into array of validationMessage[]

            This validator MUST ignore NULL or empty value.
          </Doc>
        </Param>
        <Param name="asyncValidationFunction" type="function">
          <Doc>
            Like 'validationFunction' but this one must return a Promise resolving with validation result. While validating, the widget sets 'bcdValidationPending'
            CSS class on the owning html element. The value is written to the model after a positive validation result. If a Promise is rejected for any reason,
            the widget switches to invalid state.
          </Doc>
          <ImplDoc>
            window.myAsyncValidationFunction = function(htmlElementId){
              var value = bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId); // obtain value from widget
              return new Promise(function(resolve){
                if(!value)resolve(); // allow empty values
                setTimeout(function(){
                  var result = null;
                  if ( isNaN(value) || value &lt; 10 ){
                    result = {
                      validationMessage : "Value must be >= 10"
                    };
                  }
                  resolve(result);
                }, 1000);
              });
            };
          </ImplDoc>
        </Param>
      </Api>

      <Api name="input" extends="textInput hasValidator hasHtmlEvents hasLabel">
        <ApiChange since="4.3.3">
          @emptyValue renemaed to @placeholder
          removed:
          @bcdAutofit
          @onFocus
          @onBlur
          @onEscKey
          @onTabKey
          @onEnterKey
        </ApiChange>
        <Doc>
          A simple text field input allowing user to enter arbitrary text. Specific input type can be preset via 'type' attribute.
          The input can be generally validated using 'pattern' paramter (html5 compliant) containing the JS regular expression, in such
          a case a built-in validation for WRS binding is overridden by provided validator and effectively disabled.
        </Doc>
        <Param name="min" type="number">
          <Doc>
            Sets the minimum value for an integer or numeric type input field (HTML5 only).
          </Doc>
        </Param>
        <Param name="max" type="number">
          <Doc>
            Sets the maximum value for an integer or numeric type input field (HTML5 only).
          </Doc>
        </Param>
        <Param name="autocomplete" type="string">
          <Doc>
            html autocomplete attribute. Can be on or off. Google Chrome ignores off, so set something like new-password or other.
          </Doc>
        </Param>
        <Param name="type" type="enum" value="text|email|password|int|numeric" default="text">
          <Doc>
            a type of this input field. Following types are supported for validation:
            text: a simple text input
            email: a simple text input with email validation, uses email input where available
            password: a password input
            int: an integer value (uses to html5 type=number with step=1 where available)
            numeric: a decimal value (corresponds to html5 type=number with step=any and uses where available)
          </Doc>
          <Impl>
            <Doc>
              Ignores the column type given in Wrs/Header.
            </Doc>
          </Impl>
        </Param>
      </Api>


      <Api name="textArea" extends="textInput hasValidator hasLabel">
        <Doc>Free Text input, standard HTML textarea</Doc>
        <Param name="cols" type="integer" required="true" default="5">
          <Doc>HTML Parameter on the textarea to set number of columns</Doc>
        </Param>
        <Param name="rows" type="integer">
          <Doc>HTML Parameter on the textarea to set number of rows</Doc>
        </Param>
        <Impl>
          <Doc>Define whether or not to write escaped or CDATA values</Doc>
        </Impl>
      </Api>

      <Api name="pasteList" extends="textArea">
        <Doc>Text area to paste list of elements for an in-clause</Doc>
        <Param name="toUpper" type="boolean" required="false" default="false">
          <Doc>If true, all values are translated to uppercase.</Doc>
        </Param>
        <Param name="pasteSeps" type="string" required="false" default=",; \\|\\t\\n">
          <Doc>
            Letters treated as separators between values when pasting.
            Defaults: comma, semicolon, space, pipe, tab, newline.
          </Doc>
        </Param>
        <Param name="outSep" type="string" required="false" default=",">
          <Doc>Letter treated as separators in the targetModel and also expected when reading in values from there, defaults to comma.</Doc>
        </Param>
        <Param name="maxVals" type="integer" required="false" default="1000">
          <Doc>Only the first maxVals distinct values are used.</Doc>
        </Param>
      </Api>


      <Api name="rtfTextArea" extends="textArea">
        <Doc>Free WYSIWYG text input, allowing rich text input /  editor. Writes CDATA with plain HTML in it. Make sure to write into a XML binding item.</Doc>
      </Api>


      <Api name="hasOptions">
        <ApiChange since="4.3.3">@optionsModelId deprecated; @isSortOptions renamed to @doSortOptions</ApiChange>
        <Param name="optionsModelXPath" required="true" type="modelXPath">
          <Doc>xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports
          cross references between models, i.e. $options / * / Value[@id = $guiStatus / * / MasterValue]</Doc>
        </Param>
        <Param name="doSortOptions" type="boolean" default="false">
          <Doc>Can be set to 'true' if the options should be sorted alphabetically. This is disabled per default to avoid CPU wasting.</Doc>
        </Param>
        <Param name="clearOption" type="boolean|i18nToken" default="false">
          <Doc>
            if enabled, there will be an option to clear the selection. This attribute may be true|false or a string, in latter case
            the option is considered enabled and a string follows the i18nToken type definition.
          </Doc>
        </Param>
        <Param name="doRetainInputSchema" type="boolean" default="false">
          <Doc>
            This option is 'false' per default, what means that the internal options model generates following schema: /Values/Value[@caption]+ per
            matched item. The Value element itself holds the ID with optional @caption attribute holding either ID or mapped caption in case
            optionsModelRelativeValueXPath is provided. In some cases you might want to work with internal options model and elements of the
            input document. Then you can enable this flag, which effictively disables any semantics, such as 'caption' or 'id' - as the internal options
            document will contain only matched elements from the input document, pay attention if you select an attribute in your xpath.
          </Doc>
        </Param>
      </Api>


      <Api name="hasOptionsFilter">
        <Param name="wildcard" type="enum" value="contains|startswith|endswith" default="contains">
          <Doc>
            The wildcards apply to filtering within the drop down list and for server side filters.
            This option applies only if bound to a f:Expression element and is ignored otherwise.
            For a f:Filter with @op='like', this controls the prefilling with wildcards ('*') when the value is yet empty and the field gets the focus.
            Can be 'contains', 'startswith' or 'endswith'. The user can overwrite this by adding/removing wildcards when editing the field.
          </Doc>
        </Param>
      </Api>

      <Api name="hasHtmlEvents">
        <!-- 
          implementation info:

          generally implemented in bcduiWidget._mapNativeHtmlEvents()
         -->
        <Doc>
          Widgets are tied to models hence if one would like to be updated on data change he listens to updates on the model,
          this is the encouraged way to listen to updates. However, sometimes one also would like to bind to html events, such as
          onchange, onclick etc. This API provides them. But, this events behave like html events, so they are not triggered on
          model updates etc, they are really bound to html and the hanlding is passed over to the browser.
        </Doc>
        <Param name="onchange" required="false" type="function">
          <Doc>
            the HTML onchange event
          </Doc>
        </Param>
        <Param name="onclick" required="false" type="function">
          <Doc>
            the HTML onclick event
          </Doc>
        </Param>
      </Api>

      <Api name="hasHtml5Support">
        <Doc>
          Some of the widgets provide HTML5 native support hence providing some more API to finegrain control them
        </Doc>
        <Param name="disableNativeSupport" type="boolean" default="false">
          <Doc>
            This parameter disables native HTML5 support for this widget. Please read more on side-effects in widget
            documentation.
          </Doc>
        </Param>
      </Api>

      <Api name="suggestInput" extends="hasOptionsFilter hasOptions textInput hasHtml5Support hasValidator hasLabel">
        <Doc>
          Allowing to either depict certain value from a list or accepting new value not in list.
          This input type always offers an input prompt which either acts as pre-filter for the list or also
          allows to enter new items. This widget can handle big number of options at good performance as well as supports complex options layout
          in non-native mode. Furthermore it provides you with ability to access remote data.

          [No ID/Caption mapping is available here.]
        </Doc>
        <!-- put this parameter here (although provided through hasCaptions API, the suggestInput does not support the hasCaptions-API fully yet -->
        <Param name="optionsModelRelativeValueXPath" type="xPath" default=".">
          <Doc>
            xPath expression relative to 'optionsModelXPath' providing values
          </Doc>
        </Param>
        <Param name="optionsRendererId" type="string">
          <Doc>
            * only applies to non-native implementation of this widget - to use this option you have to flag disableNativeSupport *

            The renderer provided here *must* exist prior binding to widget, that is it has to be known to ObjectRegistry at this time. At is
            recommended to construct your renderer with suppressInitialRendering=true, so that it does not run at the construction time and also
            provide targetHTMLElementId pointing to invisible container, since the renderer would reset containers CSS class having visual effects
            at construction time.

            Default options rendering stylesheet is located at /bcdui/widgetNg/suggestInput/optionsRenderer.xslt but you can provide your own here;
            the transformation has to output HTML with root element DIV containing block elements each representing an inidivual value. The children
            elements provides the value via bcdValue attribute. The rendered list is displayed in a dialog so user can pick-up an item. After that,
            the value is written to model which is found at bcdValue attribute. This way you can render complex HTML content.

            Recommended format is:
            div[div[@bcdValue]*]

            You can also respect current widget value i.e. to implement prefiltering, the values are provided as parameters to the stylesheet. Please
            refer to original stylesheet documentation for more information and parameters which are provided during transformation.

            the targetHTMLElementId of the renderer is automatically bound to internal options list box,
            the input document to this renderer is the options-model of the widget.
          </Doc>
        </Param>
        <Param name="suggestItemCount" type="integer" default="10">
          <Doc>
            Number of items to suggest during typing, this applies to non-native implementation only.
          </Doc>
        </Param>
        <Param name="filterFunction" type="string">
          <Doc>
            function name of filtering function receiving keystrokes; it gets { value, onComplete } and must call onComplete() callback once its done
          </Doc>
        </Param>
        <Param name="applyListItemSelectionFunction" type="function">
          <Doc>
            this function is called when applying value from a dropdown selection (custom rendering mode only), it gets following parameters:
            (instance, htmlElementId, bcdCaption, bcdId)
            the bcdCaption is the string provided by options model and the bcdId is the value, in case provided by options model, too. The default
            implementation is executing { instance._syncWrite(htmlElementId, bcdCaption); }
          </Doc>
        </Param>
      </Api>

      <Api name="hasCaptions" extends="hasOptions">
        <Doc>
          If targetModelXpth has a @caption attribute, id/caption mode is entered.
        </Doc>
        <Param name="ignoreCaption" required="false" type="boolean">
          <Doc>
            Do not use @caption, use id for caption as well. The caption mode is disabled.
          </Doc>
        </Param>
        <Param name="optionsModelRelativeValueXPath" type="xPath" default=".">
          <Doc>
            xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined,
            values referenced by optionsModelXPath are treated as captions. Wins over @caption and @ignoreCaption param.
          </Doc>
        </Param>
      </Api>


      <Api name="comboSelect" extends="hasCaptions hasOptionsFilter textInput">
        <Doc>
          Only allowing to either depict certain value from a list.
          This input type always offers an input prompt which either acts as pre-filter for the list.
          Does support id/caption, only items from list can be depicted.
        </Doc>
      </Api>

      <Api name="checkbox" extends="baseInput hasHtmlEvents hasLabel">
        <Doc>
          Basic checkbox which implements a 1/0 switch. The label (if used) is placed right to the checkbox
        </Doc>
      </Api>

      <Api name="singleSelect" extends="hasCaptions baseInput hasLabel hasValidator">
        <Doc>
          Renders a browser does natively for select or radio.
        </Doc>
        <Param name="skin" type="enum" value="combo" default="combo">
          <Doc>Currently supporting combo style only</Doc>
        </Param>
        <Param name="doAutoSelectSolelyOption" type="boolean" default="false">
          <Doc>If enabled, and there is only one option available, the widget will switch to that value.</Doc>
        </Param>
        <Param name="placeholder" type="i18nToken">
          <Doc>A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.</Doc>
        </Param>
      </Api>

      <Api name="sideBySideChooser" extends="widget">
        <Doc>
          Offers a SideBySiderChooser where you can select items on a source side and move them to a target side
        </Doc>
        <Param name="optionsModelXPath" required="true" type="modelXPath">
          <Doc>xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports
          cross references between models, i.e. $options / * / Value[@id = $guiStatus / * / MasterValue]</Doc>
        </Param>
        <Param name="optionsModelRelativeValueXPath" type="xPath">
          <Doc>
            xPath expression relative to 'optionsModelXPath' providing values
          </Doc>
        </Param>
        <Param name="targetModelXPath" required="true" type="writableModelXPath">
          <Doc>
            The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML
            format of data written is implemented by individual widget.
            If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
          </Doc>
        </Param>
        <Param name="sourceCaption" required="false" type="string" default="Source">
          <Doc>
            Caption(header) for source block items. Can be an i18n key (with leading i18n token).
          </Doc>       
        </Param>
        <Param name="targetCaption" required="false" type="string" default="Target">
          <Doc>
            Caption(header) for target block items. Can be an i18n key (with leading i18n token).
          </Doc>       
        </Param>
        <Param name="onBeforeChange" required="false" type="function">
          <Doc>
            Handler function triggered before change, if false is returned, the change is rejected
            receives property map: {element = the widget element, dir = one of bcdui.widgetNg.sideBySideChooser.CHANGE_DIRECTION.*, scope = object with .items to move, which can also be modified (i.e. remove items not eligible to move)}
  	     </Doc>       
        </Param>
        <Param name="onChange" required="false" type="function">
          <Doc>
            Handler function triggered after change
          </Doc>       
        </Param>
        <Param name="wrsInlineValueDelim" required="false" type="string">
          <Doc>
            Delimiter used for WRS read and write. Default is a slash.
          </Doc>       
        </Param>
        <Param name="optionsModelRelativeFilterPredicate" required="false" type="xPath">
          <Doc>
            xPath expression relative to 'optionsModelXPath' which can be used to filter options model items
	        </Doc>
        </Param>
        <Param name="allowUnknownTargetValue" required="false" type="boolean">
          <Doc>If true, target items are not removed when they are not part of the source's options model.</Doc>       
        </Param>
        <Param name="doSortOptions" required="false" type="boolean" default="true">
          <Doc>Can be set to 'false' if the options should not be sorted alphabetically.</Doc>       
        </Param>
      </Api>
      
      <Api name="connectable" extends="widget">
        <Doc> Offers a simple container with multi select, drag'n drop functionalities </Doc>
        <Param name="doSortOptions" type="boolean" default="false">
          <Doc>Can be set to 'true' if the options should be sorted using the 'sortOptionsFunction' function. This is disabled per default to avoid CPU wasting.</Doc>
        </Param>
        <Param name="sortOptionsFunction" type="function">
          <Doc>a compareFunction(a,b) passed to Array.prototype.sort(); with a, b are objects with { caption, value } A function used to sort items in the connectable. The defaulting implementation uses alphabetic sorting on caption.</Doc>
        </Param>
        <Param name="scope" type="string" required="true">
          <Doc>Defines the scope of the box. Source.</Doc>
        </Param>
        <Param name="optionsModelXPath" required="false" type="writableModelXPath">
          <Doc>xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports
          cross references between models, i.e. $options / * / Value[@id = $guiStatus / * / MasterValue]. If you specify an optionsmodelxpath, the box automatically acts as source.</Doc>
        </Param>
        <Param name="optionsModelRelativeValueXPath" type="xPath">
          <Doc>xPath expression relative to 'optionsModelXPath' providing values</Doc>
        </Param>
        <Param name="optionsModelRelativeFilterPredicate" required="false" type="xPath">
          <Doc>xPath expression relative to 'optionsModelXPath' which can be used to filter options model items</Doc>       
        </Param>
        <Param name="targetModelXPath" required="false" type="writableModelXPath">
          <Doc>The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML
            format of data written is implemented by individual widget.
            If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted. If you specify a targetmodelxpath, the box automatically acts as target</Doc>
        </Param>
        <Param name="onBeforeChange" required="false" type="function">
          <Doc>Handler function triggered before change of this box only, if false is returned, the change is rejected
            receives property map: {element = the widget element, dir = one of bcdui.widgetNg.connectable.CHANGE_DIRECTION.*, scope = object with .items to move, which can also be modified (i.e. remove items not eligible to move)}</Doc>       
        </Param>
        <Param name="onChange" required="false" type="function">
          <Doc>Handler function triggered after change. It's triggered on source AND destination of the change (e.g. source/target, target/source and target/target)</Doc>       
        </Param>
        <Param name="wrsInlineValueDelim" required="false" type="string">
          <Doc>Delimiter used for WRS read and write. Default is a slash.</Doc>       
        </Param>
        <Param name="isDoubleClickTarget" required="false" type="boolean">
          <Doc>If true (and box is target) then double click moves items from source to this target, otherwise first found target. Default is false.</Doc>       
        </Param>
        <Param name="className" required="false" type="string">
          <Doc>Optional additional classname which is added to the container.</Doc>       
        </Param>
	      <Param name="unselectAfterMove" required="false" type="boolean">
          <Doc>If true, the items get unselected after being moved. Default is false.</Doc>       
        </Param>
        <Param name="generateItemHtml" required="false" type="function">
          <Doc>
            Function to generate the html for one container item. Gets object with properties: value, caption, position;
            see implementation documentation to read more about the structure to return by this function.
          </Doc>
          <ImplDoc>
            this function is expected to return following string template:
            &lt;li
              class='ui-selectee'
              bcdValue='value'
              bcdPos='1'
              bcdLoCase='caption'
              title=''>&lt;span class='bcdItem'>[Caption]&lt;/span>&lt;/li>
          </ImplDoc>
        </Param>
        <Param name="generateItemHelperHtml" required="false" type="function">
          <Doc>
            Function to generate the html for helper container item which appears when you drag items. Basically the function for jQuery's sortable helper function. By default the first 5 items are listed.
          </Doc>
        </Param>
        <Param name="showLasso" required="false" type="boolean" default="true">
          <Doc>If true, you get a selection lasso. Default is true.</Doc>       
        </Param>
        <Param name="allowUnknownTargetValue" required="false" type="boolean">
          <Doc>If true, target items are not removed when they are not part of the source's options model.</Doc>       
        </Param>
      </Api>

      <Api name="listSelect" extends="hasCaptions">
        <Doc>
          Offers a user simple list of options able of multi-selection, it does not offer any input prompt. Additionally, this
          input provides number of skins (see skin attribute)
        </Doc>
        <Param name="skin" type="enum" value="list|checkbox|sideBySide" default="list">
          <Doc>
          - list
            a simple HTML SELECT where user can select multiple entries

          - checkbox
            the entries are rendered as checkboxes allowing multiple selection by checking/unchecking

          - sideBySide
            offers two ListSelect boxes side by side where items from a list of available items can be moved to a list of selected items.
          </Doc>
        </Param>
      </Api>


      <Api name="multiSelect" extends="hasCaptions">
        <ApiChange since="4.3.3">
          remove @visitableSize attribute (number of visible elements in list)
        </ApiChange>
        <Doc>Is a mash-up of comboSelect or suggestSelect where the user can pick individual items from the selection (or new items entered)
        and add them into the options list via "Add" button or ENTER hit. Additional remove button removes selected entry from the list. The @allowNewItem attribute
        switches between both input types, if 'true' it effectively disables caption mapping.</Doc>
        <Param name="allowNewItem" type="boolean">
          <Doc>if TRUE, new items are also allowed as input (not only those from list). This option effectively turns off caption mapping, so that
          options are displayed by their values even though caption might exist.</Doc>
        </Param>
      </Api>

      <Api name="dimensionChooser" state="NOT_APPROVED">
        <Doc>
        *** This specification is not approved yet! ***

This widget offers hiararchical selection box with n-SingleSelect inputs (per dimension level) and Add/Remove controls,
it displays a field where the user can enter a value or select it from a list of
pre-defined values. These values are copied to a target model under a specified
target XPath. When there is a list of allowed values the inputField can also
apply a caption-value translation so that the displayed values can differ from
the data that is actually placed in XML.
        </Doc>
        <Param name="optionsModelXPath">
          <Doc>xpath of the dimension model</Doc>
        </Param>
        <Param name="optionsModelRelativeValueXPath">
          <Doc>xpath of the dimension model</Doc>
        </Param>
        <Param name="dimensionName">
          <Doc>xpath of the dimension model.</Doc>
        </Param>
        <Param name="multiSelect">
          <Doc>Make a multi selected dimension chooser. Can be true|false|check, false is default.</Doc>
        </Param>
        <Param name="allowMixedSelect">
          <Doc>allow heterogene selection in multi select chooser</Doc>
        </Param>
        <Param name="checkBoxCaption" type="i18nToken">
          <Doc>caption (i18n) key. of checkbox to turn on and of the multiselect</Doc>
        </Param>
        <Param name="configurationModelId">
        <Doc>modelId of chooser configuration xml file</Doc>
        </Param>
        <Param name="useCaptions" type="boolean">
          <Doc>If true, the chooser will receive captions and codes. By convention the bref of the captions column is 'bRef'_caption. By default no captions are created.</Doc>
        </Param>
        <Param name="url" type="url">
          <Doc>The URL the model is loaded from. This URL can be extended with a compressed request document if a requestDocument Parameter is provided. If omitted the WrsServlet is taken.</Doc>
        </Param>
        <Param name="clearOption" type="boolean|i18nToken" default="false">
          <Doc>
            if enabled, there will be an option to clear the selection. This attribute may be true|false or a string, in latter case
            the option is considered enabled and a string expected to be is a i18n key for the token.
          </Doc>
        </Param>
      </Api>

      <Api name="scorecardConfigurator" extends="widget">
        <Doc>
          Creates a scorecard configurator, providing the scc:Layout section of the scorecard configuration, able of
          showing the drag and drop area for the dimensions and kpis and aspects.
        </Doc>
        <Impl>
          <Jsp allowsChildren="true">
            <AllowedChildren>
              <Child name="cmp:config" doc="The model containing the scorecard configurator configuration data." />
            </AllowedChildren>
          </Jsp>
        </Impl>
        <Examples>
          <Example type="jsp">
            &lt;component:scorecardConfigurator isDefaultHtmlLayout='true'>
              &lt;b:model url='scorecardConfiguratorOptions.xml'/>
            &lt;/component:scorecardConfigurator>
          </Example>
          <Example type="js">
            bcdui.component.createScorecardConfigurator({
               targetHtml:          "scorecardConfiguratorDiv"
             , scorecard:           sc
             , isDefaultHtmlLayout: true
            });
          </Example>
        </Examples>
        <Param name="config" type="dataProvider" isJSPChild="paramBag.config">
          <Doc>
            Model containing the configuration for the scorecard configurator. By default this is taken from dimensionsAndKpis.xml.
          </Doc>
        </Param>
        <Param name="scorecard" type="dataProvider" isJSPParent="true">
          <Doc>
            Id of the scorecardRenderer the configurator belongs to. If not given, the surrounding renderer is assumed to be a cmp:scorecard.
          </Doc>
        </Param>
        <Param name="targetModel" type="dataProvider" isJSPChild="paramBag.targetModel">
          <Doc>
            The configuration is written to $guiStatus/guiStatus:Status/scc:Layout[scorecardId='scorecardId'] by default. While the xpath /RootNode/scc:Layout[scorecardId='scorecardId'] is fixed, you can specify an own targetModel if needed.
          </Doc>
        </Param>
        <Param name="isDefaultHtmlLayout" type="boolean" default="false">
          <Doc>
            If true, a standard layout for dnd area is created. If false, you need to provide containers with classes: bcdCurrentKpiList, bcdCurrentScRowDimensionList, bcdCurrentAspectList, bcdKpiList, bcdScDimensionList, bcdAspectList within an outer bcdScorecardDndMatrix container.
            if your targetHtml got classes bcdDndBlindOpen or bcdDndBlindClosed, the actual dnd area is also put in collapsable boxes (either open or closed by default). 
          </Doc>
        </Param>
        <Param name="rowAspect" type="boolean" default="false">
          <Doc>
            Enables another drag'n drop box for aspects (marked with rowAspect='true') which are put in front of all aspects. KPI dimensions needs to be a row dimension in this case.
          </Doc>
        </Param>
        <Param name="isTemplate" type="boolean" default="false">
          <Doc>
            Enable the template feature. This is an Enterprise Edition only feature.
          </Doc>
        </Param>
        <Param name="templateTargetHtmlElementId" type="string">
          <Doc>
            If isTemplate is true then this attribute can be used to control the div where the template editor is placed.
          </Doc>
        </Param>
        <Param name="isRanking" type="boolean" default="false">
          <Doc>
            Enable the ranking feature. This is an Enterprise Edition only feature.
          </Doc>
        </Param>
        <Param name="rankingTargetHtmlElementId" type="string">
          <Doc>
         If isRanking is true then this attribute can be used to control the div where the ranking editor is placed.
         </Doc>
        </Param>
        <Param name="showSummary" type="boolean" default="false">
          <Doc>
            Enable the summary feature.
          </Doc>
        </Param>
        <Param name="summaryTargetHtmlElementId" type="string">
          <Doc>
            If showSummary is true then this attribute can be used to control the div where the summary is placed.
          </Doc>
        </Param>
        <Param name="hasUserEditRole" type="boolean" default="false">
          <Doc>
            Template Editor also has edit capability. If not given, bcdui.config.clientRights.bcdScorecardTemplateEdit is used to determine state (either *(any) or scorecardId to enable).
          </Doc>
        </Param>
        <Param name="reportName" type="string">
          <Doc>
            Name of the report is used to access the persistent layouts.
          </Doc>
        </Param>
        <Param name="applyFunction" type="string">
          <Doc>
            Function name which is used for the apply button in isDefaultHtmlLayout=true mode. Default is bcdui.core.lifecycle.applyAction.
          </Doc>
        </Param>
      </Api>

      <Api name="farConfigurator" extends="widget">
        <Doc>
          A FAR configurator UI displaying 3 side by side choosers for choosing Dimensions, Measures and Sorting of the items,
          writes far:ConfiguratorLayout format into targetModelXPath; this widget is configured by number of parameters referencing
          various nodesets as Dimensions and Measures source items. It is expected that every dimension and measure item is represented
          by an element in options model providing the value and caption in separate attributes on an element,i.e. Item[@value @caption].
          This widget supports flat or hierarhical input. For either input (flat/hierarchical) you need to provider tree configuration
          object containing information about how determine your hierarchy.
          i.e. { levelNodeName : 'far:Category', itemNodeName : 'far:Item', isDefaultCollapsed: true }
        </Doc>
        <Param name="targetModelXPath" type="writableModelXPath" required="true" default="$guiStatus/guiStatus:Status">
          <Doc>
            Target xPath to write the far:ConfiguratorLayout configuration into.
          </Doc>
        </Param>
        <Param name="dimensions_optionsModelXPath" type="xPath" required="true">
          <Doc>
            items considered dimensions, xpath must reference the caption attribute on the item-set; Reference deep link to items 
            (including levels) in case you have hierarhical structure i.e. $config/far:Configurator/far:Dimensions//* /@caption
          </Doc>
        </Param>
        <Param name="dimensions_optionsModelRelativeValueXPath" type="xPath" required="true">
          <Doc>
            xpath relative to 'dimensions_optionsModelXPath' that references a value attribute, i.e. '../@value'
          </Doc>
        </Param>
        <Param name="dimensions_treeConfig" type="object" required="true">
          <Doc>
            tree configuration object (see component documentation)
          </Doc>
        </Param>
        <Param name="measures_optionsModelXPath" type="xPath" required="true">
          <Doc>
            items considered dimensions, xpath must reference the caption attribute on the item-set; Reference deep link to items 
            (including levels) in case you have hierarhical structure i.e. $config/far:Configurator/far:Dimensions//* /@caption
          </Doc>
        </Param>
        <Param name="measures_optionsModelRelativeValueXPath" type="xPath" required="true">
          <Doc>
            xpath relative to 'dimensions_optionsModelXPath' that references a value attribute, i.e. '../@value'
          </Doc>
        </Param>
        <Param name="measures_treeConfig" type="object" required="true">
          <Doc>
            tree configuration object (see component documentation)
          </Doc>
        </Param>
        <Param name="doSortOptions" type="boolean" default="false">
          <Doc>Can be set to 'true' if the options should be sorted alphabetically. This is disabled per default to avoid CPU wasting.</Doc>
        </Param>
      </Api>

      <Api name="universalFilter" extends="widget">
        <Doc>
        </Doc>
        <Param name="targetModelXPath" type="writableModelXPath" required="true" default="$guiStatus/guiStatus:Status/f:Filter/f:And">
          <Doc>
            Target xPath for this filter to work with. This widget creates a filter compatible ( http://www.businesscode.de/schema/bcdui/filter-1.0.0 ) structure beyond given target element,
            and will use f:And, f:Or and f:Expression elements to represent the filter.
            You can choose either f:And, f:Or or any other element as a target. While choosing f:And/f:Or, the user will not be able do modify that
            root conjunction whereas there is no such restriction when using another (or custom) element as a target element.
          </Doc>
        </Param>
        <Param name="bRefOptionsModelXPath" type="xPath" required="true">
          <Doc>
            xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display.
          </Doc>
        </Param>
        <Param name="bRefOptionsModelRelativeValueXPath" type="xPath" required="false">
          <Doc>
            xPath expression relative to 'bRefOptionsModelXpath' providing values for options to display, if this is defined,
            values referenced by bRefOptionsModelXpath are treated as captions.
          </Doc>
        </Param>
      </Api>

      <Api name="slider" extends="baseInput">
        <Doc>
          A slider widget providing UI with a moving handle to select a value or to select a range. The implementation is based
          on noUiSlider, so is the API. Please refer to original documentation to explore all options. You can use full options
          from JS-API, however, they are not available from declarative context. Currently, the range mode is restricted to 2
          handles only and you cannot provide start option, since it is read from the model.
        </Doc>
        <Param name="optionsModelXPath" type="modelXPath">
          <Doc>xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports
          cross references between models, i.e. $options / * / Value[@id = $guiStatus / * / MasterValue]. If not provided, the widget is not linked to discrete
          values, in this case the min/max options has to be provided.</Doc>
        </Param>
        <Param name="optionsModelRelativeValueXPath" type="xPath" default=".">
          <Doc>
            xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined,
            values referenced by optionsModelXPath are treated as captions.
          </Doc>
        </Param>
        <Param name="min" type="number">
          <Doc>
            Defines the minimum value, must not be set if optionsModelXpath is provided.
          </Doc>
        </Param>
        <Param name="max" type="number">
          <Doc>
            Defines the maximum value, must not be set if optionsModelXpath is provided.
          </Doc>
        </Param>
        <Param name="isRange" type="boolean" default="false">
          <Doc>
            If enabled, the slider will operate in range-selection mode, providing min/max handles to define a range.
          </Doc>
        </Param>
        <Param name="relativeTargetXPathMin" type="xPath" default="/min">
          <Doc>
            When operating in range-mode, this defines the relative xpath to targetModelXPath, to write the 'min' value. This option not defined in non-range mode.
          </Doc>
        </Param>
        <Param name="relativeTargetXPathMax" type="xPath" default="/max">
          <Doc>
            When operating in range-mode, this defines the relative xpath to targetModelXPath, to write the 'max' value. This option not defined in non-range mode.
          </Doc>
        </Param>
        <Param name="labelRenderingFunction" type="function">
          <Doc>
            Your custom rendering function to render the label, which gets args with following properties: targetHtml, values[], captions[];
            this function is executed on every update to the widget but also while sliding. This option is only effective unless native 'tooltips' option is
            used.
          </Doc>
        </Param>
        <Param name="labelRenderingFunctionTargetHtml" type="string">
          <Doc>
            jQuery selector to access element to use as targetHtml for labelRenderingFunction, if you choose to use your custom one.
            This option is only effective unless native 'tooltips' option is used.
          </Doc>
        </Param>
      </Api>

      <Api name="comment" extends="widget hasLabel">
        <Doc> Offers a simple container with comment functionality</Doc>
        <Param name="scope" type="string" required="true">
          <Doc>
            A given scope for the current comments.
          </Doc>
        </Param>
        <Param name="instance" type="string" required="true">
          <Doc>
            A given instance for the current comments.
          </Doc>
        </Param>
        <Param name="caption" type="string">
          <Doc>
            A caption string which appears in the top add row.
          </Doc>
        </Param>
        <Param name="addBRefs" type="string">
          <Doc>
            Space separated list of additional bRefs you want to load.
          </Doc>
        </Param>
        <Param name="onBeforeSave" type="function">
          <Doc>
            Function which is called before each save operation. Parameter holds current wrs dataprovider. Function needs to return true to save or false for skipping save process and resetting data.
          </Doc>
        </Param>
        <Param name="filterBRefs" type="stringList">
          <Doc>
            The space separated list of binding Refs that will be used in filter clause of request document.
          </Doc>
        </Param>
      </Api>

    </BcdAPI>

    <BcdObjects>
      <Doc>widgets each with meta-data about implementation of specific API, implementation class, etc</Doc>
      <BcdObject name="checkbox" implements="checkbox" implementationPackage="bcdui.widgetNg.checkbox"/>
      <BcdObject name="button" implements="button" implementationPackage="bcdui.widgetNg.button"/>
      <BcdObject name="input" implements="input" implementationPackage="bcdui.widgetNg.input"/>
      <BcdObject name="dateInput" implements="dateInput" implementationPackage="bcdui.widgetNg.dateInput"/>
      <BcdObject name="singleSelect" implements="singleSelect" implementationPackage="bcdui.widgetNg.singleSelect"/>
      <BcdObject name="suggestInput" implements="suggestInput" implementationPackage="bcdui.widgetNg.suggestInput"/>
      <BcdObject name="textArea" implements="textArea" implementationPackage="bcdui.widgetNg.textArea"/>
      <BcdObject name="pasteList" implements="pasteList" implementationPackage="bcdui.widgetNg.pasteList"/>
      <BcdObject name="sideBySideChooser" implements="sideBySideChooser" implementationPackage="bcdui.widgetNg.sideBySideChooser"/>
      <BcdObject name="connectable" implements="connectable" implementationPackage="bcdui.widgetNg.connectable"/>
      <BcdObject name="scorecardConfigurator" implements="scorecardConfigurator" implementationPackage="bcdui.component.scorecard.scorecardConfigurator"/>
      <BcdObject name="farConfigurator" implements="farConfigurator" implementationPackage="bcdui.component.far.farConfigurator"/>
      <BcdObject name="universalFilter" implements="universalFilter" implementationPackage="bcdui.widgetNg.universalFilter"/>
      <BcdObject name="slider" implements="slider" implementationPackage="bcdui.widgetNg.slider"/>
      <BcdObject name="comment" implements="comment" implementationPackage="bcdui.widgetNg.comment"/>
    </BcdObjects>

    <!-- priority queue for widgets implementations for phase one -->
    <WidgetsPhase1>
      <BcdObject name="listSelect" implements="listSelect" implementationPackage="bcdui.widgets.xxx"/>
      <BcdObject name="multiSelect" implements="multiSelect" implementationPackage="bcdui.widgets.xxx"/>
      <BcdObject name="comboSelect" implements="comboSelect" implementationPackage="bcdui.widgetNg.xxx"/>
    </WidgetsPhase1>

    <!-- phase 2 widget implementation queue -->
    <WidgetsPhase2>
      <BcdObject name="rtfTextArea" implements="rtfTextArea" implementationPackage="bcdui.widgets.xxx"/>
      <BcdObject name="periodChooser" implements="periodChooser" implementationPackage="bcdui.widgets.xxx"/>
      <BcdObject name="dimensionChooser" implements="dimensionChooser" implementationPackage="bcdui.widgets.xxx"/>
    </WidgetsPhase2>

    <OldAPI>
      <!-- currently defined API which will be likely replaced/standardized by new API -->
      <InputFieldWidget>
        <param name="targetModelId"/>
        <param name="id"/>
        <param name="targetModelXPath"/>
        <param name="keepEmptyValueExpression"/>
        <param name="optionsModelId"/>
        <param name="optionsModelXPath"/>
        <param name="optionsModelRelativeValueXPath"/>
        <param name="optionsModelIsSuggestionOnly"/>
        <param name="additionalFilterXPath"/>
        <param name="clearOption"/>
        <param name="emptyValue"/>
        <param name="mandatory"/>
        <param name="bcdAutofit"/>
        <param name="setFocus"/>
        <param name="onFocus"/>
        <param name="onBlur"/>
        <param name="onEscKey"/>
        <param name="onTabKey"/>
        <param name="onEnterKey"/>
        <param name="tabIndex"/>
        <param name="setCursorPositionAtEnd"/>
        <param name="maxlength"/>
        <param name="isPassword" select="false()"/>
        <param name="isSortOptions"/>
        <param name="wildcard"/>
      </InputFieldWidget>
      <SingleSelect>
        <param name="targetModelId"/>
        <param name="targetModelXPath"/>
        <param name="keepEmptyValueExpression"/>
        <param name="optionsModelId"/>
        <param name="optionsModelXPath"/>
        <param name="optionsModelRelativeValueXPath"/>
      </SingleSelect>
      <MultiSelect>
        <param name="targetModelId"/>
        <param name="targetModelXPath"/>
        <param name="keepEmptyValueExpression"/>
        <param name="optionsModelId"/>
        <param name="optionsModelXPath"/>
        <param name="optionsModelRelativeValueXPath"/>
        <param name="isCheckBox"/>
        <param name="visibleSize"/>
      </MultiSelect>
      <PeriodChooser>
        <param name="id"/>
        <param name="targetModelId"/>
        <param name="caption"/>
        <param name="targetModelXPath"/>
        <param name="isSecondSelectable"/>
        <param name="isMinuteSelectable"/>
        <param name="isHourSelectable"/>
        <param name="isDaySelectable"/>
        <param name="isWeekSelectable"/>
        <param name="isMonthSelectable"/>
        <param name="isQuarterSelectable"/>
        <param name="isYearSelectable"/>
        <param name="firstSelectableDay"/>
        <param name="lastSelectableDay"/>
        <param name="showPrevNextButtons"/>
        <param name="isFreeRangeSelectable"/>
        <param name="outputPeriodType"/>
        <param name="textInput"/>
        <param name="validate"/>
        <param name="mandatory"/>
      </PeriodChooser>
      <SideBySideChooser>
        <param name="id"/>
        <param name="targetModelXPath"/>
        <param name="optionsModelXPath"/>
        <param name="optionsModelRelativeValueXPath"/>
        <param name="defaultSourceCaption"/>
        <param name="sourceCaptionKey"/>
        <param name="defaultTargetCaption"/>
        <param name="targetCaptionKey"/>
        <param name="isDisabled"/>
        <param name="onBeforeChange"/>
        <param name="onchange"/>
        <param name="wrsInlineValueDelim"/>
        <param name="optionsModelRelativeFilterPredicate"/>
        <param name="targetHTMLElementId"/>
      </SideBySideChooser>
      <TextArea>
        <param name="targetModelId"/>
        <param name="id"/>
        <param name="targetModelXPath"/>
        <param name="cols"/>
        <param name="rows"/>
        <param name="tabIndex"/>
        <param name="mandatory"/>
      </TextArea>
      <PasteList>
        <param name="id"/>
        <param name="targetModelId"/>
        <param name="targetModelXPath"/>
        <param name="tabIndex"/>
        <param name="mandatory"/>
        <param name="toUpper"/>
        <param name="separators"/>
      </PasteList>
      <DimensionChooser>
        <param name="id"/>
        <param name="targetModelId"/>
        <param name="targetModelXPath"/>
        <param name="keepEmptyValueExpression"/>
        <param name="optionsModelId"/>
        <param name="optionsModelXPath"/>
        <param name="optionsModelRelativeValueXPath"/>
        <param name="dimensionName"/>
        <param name="multiSelect"/>
        <param name="allowMixedSelect"/>
        <param name="checkBoxCaption"/>
        <param name="configurationModelId"/>
        <param name="useCaptions"/>
        <param name="url"/>
        <param name="clearOption"/>
        <param name="emptyValue"/>
      </DimensionChooser>
      <Button>
        <param name="id"/>
        <param name="caption"/>
        <param name="tooltip"/>
        <param name="onClickAction"/>
        <param name="stayPressed"/>
        <param name="tabindex"/>
        <param name="status"/>
        <param name="href"/>
        <param name="name"/>
        <param name="contextPath"/>
      </Button>
    </OldAPI>
  </WorkingDraft>
</Root>