/*
  Copyright 2010-2017 BusinessCode GmbH, Germany

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
//**************************************
// Handle compilation of BCD-UI's Java server and generation of Java classes from xsd
apply plugin: 'java' // because we are also imported else where, we can not use the new plugins{} mechanism (gradle 4.1)
sourceCompatibility = JavaVersion.VERSION_1_8

// Add jaxb gensrc to default source set
sourceSets {
  main {
    java {
      srcDirs = [ "src/main/java", "$buildDir/gensrc/main/java" ]
    }
  }
}

// 3rdParty jars
configurations { antLib }
configurations.all {
  // The list is exhaustive, we don't need transitive dependency during compile or run
  transitive = false
}

// Import dependencies of BCD-UI lib
apply from: '../../BCD-UI/Docu/development/bcdui_dependencies.gradle'

dependencies {
  repositories {
    mavenCentral()
    jcenter()
  }

  // Needed by Ant during build
  antLib 'com.sun.xml.bind:jaxb-impl:2.2.6'
  antLib 'com.sun.xml.bind:jaxb-xjc:2.2.6'
  antLib group: 'javax.xml.bind', name: 'activation', version: '1.0.2'
  antLib group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
}

//********************************
// Generate java sources based on XSDs into gensrc/java
// Currently 'subjectsettings' and 'menu'
task bcduiGensrcJaxb {

  // List of JAXB types for be generated from xsd
  def genJaxbTypes = project.hasProperty('bcdui.genJaxbTypes') ? project.getProperty('bcdui.genJaxbTypes').split(", |,| ") : []

  onlyIf { genJaxbTypes.size() > 0 }

  def taskDestDirName = "$buildDir/gensrc/main/java"

  // For up-to-date check
  genJaxbTypes.each { xsdName ->
    inputs.file "$bcdXsdDir/$xsdName-1.0.0.xsd"
    outputs.dir "$taskDestDirName/de/businesscode/bcdui/$xsdName"
  }

  doLast {
    System.setProperty('javax.xml.accessExternalSchema', 'file')
    ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.antLib.asPath)

    file(taskDestDirName).mkdirs()

    genJaxbTypes.each { xsdName ->
      delete taskDestDirName+'de/businesscode/$xsdName/config'
      ant.xjc( destdir: taskDestDirName ) {
        ant.schema file: "$bcdXsdDir/$xsdName-1.0.0.xsd"
      }
    }
  }
}

//*********************************
// Java Plugin default task configuration
// Compile java, making sure we have generated sources before
compileJava {
  dependsOn bcduiGensrcJaxb
  options.debug = true
  options.debugOptions.debugLevel = "source,lines,vars"
}

//*********************************
// Java Plugin default task configuration
jar {
  baseName = "$artifactsBaseName-server"
  version  = bcduiVersion
  manifest {
    attributes( bcduiManifestAttributes() )
  }
  metaInf {
    from bcduiMetaInf
  }
}

//********************************
// Refers to Java Plugin's default clean task
task bcduiClean {
  group = 'bcd-ui'
  dependsOn clean
}

//********************************
// Refers to default task
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  baseName = "$artifactsBaseName-server"
  version  = bcduiVersion
  from sourceSets.main.allSource
}

//********************************
// Convenience task, collecting all 3rdParty dependencies
task bcduiServerCollect3rdPartyJars ( type: Copy ) {
  group 'bcd-ui/advanced'
  def taskDestDir = '3rdPartyJars'
  description "Collects all 3rd party dependency jars in Server|JspTaglib/$buildDir.name/$taskDestDir"

  into "$buildDir/$taskDestDir"
  from(configurations.compile) {
    into "compileAndWebinf"
  }
  from(configurations.runtime - configurations.compile) {
    into "onlyWebinf"
  }
  from(configurations.compileOnly) {
    into "compileOnlyNotWebinf"
  }
}

artifacts {
  archives sourcesJar
}
